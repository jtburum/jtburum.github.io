[{"slug":"2021-unique-values-for-db-column-rails","category":"blog","title":"How to get unique values for a database column in Rails","description":"rails unique db values","tags":["rails","databases"],"body":"\nThe below database call through `ActiveRecord` will return all the unique/distinct values for a single column.\n\n```ruby\nActiveRecordTable.distinct.pluck(:column)\n```\n\nThe distinct method called on an `ActiveRecord` model tells `ActiveRecord` whether the values should be unique or not. If you didn't care about unique values you could use a method like `select`.\n\nPluck is then used to query the column or columns you want the values for. An example from an application:\n\n```ruby\nUser.distinct.pluck(:email)\n```\n\n\n"},{"slug":"rails-db-encryption-cheetsheet","category":"blog","title":"Rails db encryption cheatsheet","description":"rails db encryption walkthrough","tags":["rails","encryption"],"body":"\n<h4>!Important. The lastest versions of Rails now ship with this functionality without needing the attr_encrypted gem.</h4>\n<br />\nA few notes to refer to when needing to add database encryption to a Rails app that uses ActiveRecord:\n\n*This is not a comprehensive post. It is a brief reference for developers with some experience using Rails but haven't used it recently.\n\n1) Install a third party gem, `attr_encrypted`\n\n```ruby\ngem install attr_encrypted\n```\n\n2) Generate a migration to add the encrypted column name. You must prefix the column name with \"encrypted\".\n\n```ruby\nrails g migration add_secret_to_users encrypted_secret\n```\n\n3) Add the method `attr_encrypted` to your ActiveRecord model, the first argument is your column name without the encrypted prefix. They key option below will be the key used to handle the actual encryption and decryption. A few other keyword options to the `attr_encrypted` method are available are `algorithm`, `insecure_mode`, and `mode`.\n\n```ruby\nclass User < ApplicationRecord\n  attr_encrypted :secret, key: \"the secret key\"\nend\n```\n\n4) When accessing the new columns data, you can leave off the encrypted prefix to get the actual value, or keep the encrypted prefix to get the encrypted value.\n\n```ruby\n# returns plain text\nUser.last.secret\n\n# returns encrypted\nUser.last.encrypted_secret\n```\n\n5) When saving the new columns data you will save it with the encrypted prefix. There is also a method defined on the ActiveRecord model for encrypting the columns data, in this case `User.encrypt_secret`.\n\n```ruby\nUser.create(\n  encrypted_secret: User.encrypt_secret(SecureRandom.urlsafe_base64)\n)\n```\n\nMore Ruby cheatsheets:\n[Ruby HTTP gem](https://www.devdecks.io/2021-ruby-http-gem-cheatsheet),\n[Rails params](https://www.devdecks.io/2021-rails-params-cheatsheet),\n[Rails error handling](https://www.devdecks.io/2021-rails-handling-errors)"}]