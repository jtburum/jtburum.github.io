[{"slug":"2022-$$-in-postgres","category":"blog","title":"$$ in postgres","description":"learn about $$ in postgres","tags":["postgres"],"body":"\n`$$` in postgres is a string literal. Function bodies in postgres (and sql) as plain text strings. Check out this example from a [previous post](https://www.devdecks.io/2022-create-and-execute-stored-procedure-postgres) on stored procedures:\n\n```\ncreate or replace procedure report_status_update(\n  new_status varchar(20),\n  report_id int\n)\nlanguage plpgsql   \nas $$\nbegin\n   update reports\n   set status = new_status\n   where id = report_id\n   commit;\nend;$$;\n```\n\nYou will notice we capture the actual function body (starts with the `begin` keyword) in `$$` and after we have finished defining the function body (ends with `end` keyword) then we close the string literal with another `$$`.\n"},{"slug":"2022-abstract-class-ruby","category":"blog","title":"Abstract class vs regular class in ruby","description":"learn about abstract classes","tags":["ruby"],"body":"\nIn Ruby programming we use classes to represent real world objects and encapsulate behavior relevant to each object, respectively. We then create instances of those classes and call methods on them to make our programs run:\n\n```ruby\nclass Dog\n def bark\n   \"woof\"\n end\nend\n \nputs Dog.new.bark\n\n```\n\nClasses can also inherit from other classes, creating an inheritance chain. When we inherit from a class we get access to all of the behavior that exists on the class we inherit from, as well as any classes that that class inherits from:\n\n```\nclass Animal\n def eats?\n  true\n end\nend\n \nclass Dog < Animal\n def bark\n   \"woof\"\n end\nend\n \nputs Dog.new.eats?\nputs Animal.new.eats?\n\n```\n\nNotice in the above example that we are able to create instances of both `Animal` and `Dog` and call the method Animal.\n\nNow the difference between these types of classes and an abstract class is that an abstract class can only be inherited from, you never create instances of the inheriting class directly. A good example of this in the ruby ecosystem is the Rails framework's ActiveRecord library. You will notice you never see `ActiveRecord::Base.new` called in a project, it is always only inherited from, thus making it “abstract”.\n\nIf you need more ruby posts to keep you happy then I'm happy to oblige, check out [this one](http://localhost:4000/2022-convert-nested-array-to-hash)."},{"slug":"2022-access-property-off-object-vscode","category":"blog","title":"Access property off object through destructuring","description":"javascript destructuring and object access","tags":["javascript"],"body":"\nPattern matching is a super useful way to cleanup our code. Instead of heaving to access keys directly off of objects in callback functions, we can use destructuring to get access to the key as its own variable from within a closure.\n\n```\nevent.locations.filter(({localtionId}) => console.log(locationId)\n```\n\nIn the above, instead of having to write `location.locationId` everywhere in the callback function, we are able to access the `locationId` directly.\n\n"},{"slug":"2022-add-element-to-tuple-at-an-index","category":"blog","title":"Add element to tuple at an index postion","description":"How to add element to tuple at an index postion","tags":["elixir"],"body":"\nFor example's sake, let's say you were working with an Elixir tuple that has four elements:\n```\nfour_elem_tuple = {\"one\", \"two\", \"three\", \"four\"}\n```\n\nIn this made up scenario you want to add an element after in the second position of the tuple, or index position 1. You can do that using the `Tuple` modules `insert_at/3` function. \n```\nfour_elem_tuple = {\"one\", \"two\", \"three\", \"four\"}\nTuple.insert_at(four_elem_tuple, 1, \"one.five\")\n=> {\"one\", \"one.five\", \"two\", \"three\", \"four\"}\n```\n\nIf you just want to add an element to the tuple as the last element in the collection, you can use the `Tuple.append/2` function.\n\n```\nfour_elem_tuple = {\"one\", \"two\", \"three\", \"four\"}\nTuple.append(four_elem_tuple, \"five\")\n\n=> {\"one\", \"two\", \"three\", \"four\", \"five\"}\n```\n\nIn [another post](https://www.devdecks.io/2022-remove-element-from-tuple-at-an-index) I review how to delete an element from a tuple at a given index position.\n"},{"slug":"2022-add-nofollow-to-page-in-phoenix-application","category":"blog","title":"Add nofollow to pages in a Phoenix application","description":"How to add nofollow to pages in a Phoenix application","tags":["phoenix","seo"],"body":"\nIn a [previous post](https://www.devdecks.io/2020-seo-in-elixir) I outlined how you can add meta tags to a template in a phoenix application to help with SEO. In this post I will review the functionality that's needed to accomplish setting `<meta>` tags in the `<head>` of your html document. The tags will be used to tell Google and most other search engines that this page should not be included in their index.\n\n`<meta>` tags are usually used to communicate with an outside service regarding something you'd like them to know, in the SEO example you want a search engine to understand more information about the content of the page. For this example we want search engines to know that we don't want this page to be included in their index.\n\nTo add meta tags to templates in your html documents first we will create functions in your Phoenix LayoutView that can be invoked by any other template in your application. By adding the functions here we can optionally choose to call them within any other template we create, so we don't have to have the tags on every page, just the ones that need it.\n\nThat code looks like:\n```elixir\ndefmodule DevDecksWeb.LayoutView do\n  use DevDecksWeb, :view\n\n  def meta_tags(attrs_list) do\n    Enum.map(attrs_list, &meta_tag/1)\n  end\n\n  def meta_tag(attrs) do\n    tag(:meta, Enum.into(attrs, []))\n  end\nend\n```\n\nIn the root layout file (root.html.leex) call the `meta_tags` function if `meta_tags` are provided to `assigns`. Call `assigns[:meta_attrs]` directly here instead of `@meta_attrs` so that if `@meta_attrs` is not provided the application does not error and stop execution.\n```elixir\n<%= if assigns[:meta_attrs], do: meta_tags(assigns[:meta_attrs]) %>\n```\n\nIf you're using a LiveView template add the `meta_tags` to `assigns` in mount like the below:\n```elixir\ndef mount(_params, _session, socket) do\n    meta_attrs = [\n      %{name: \"robots\", content: \"noindex\"},\n      %{name: \"googlebot\", content: \"noindex\"}\n    ]\n\n  {:ok, assign(socket, meta_attrs: meta_attrs)}\nend\n```\n\nIf you're using an MVC approach you can add the `meta_attrs` to your controller that is generating the template:\n```elixir\ndef index(conn, _params) do\n  meta_attrs = [\n    %{name: \"robots\", content: \"noindex\"},\n    %{name: \"googlebot\", content: \"noindex\"}\n  ]\n\n  render(conn, \"index.html\", meta_attrs: meta_attrs)\nend\n```\n\nThe meta tags shown in this example are directions from [Google's documentation](https://developers.google.com/search/docs/advanced/crawling/block-indexing). It should be noted that these tags should prevent *most* web crawlers from indexing your page, but it's possible that other crawlers handle indexing differently.\n\nFurther reading:\n- [Rendering a LiveView template outside of router](https://www.devdecks.io/2022-rendering-liveview-template-outside-of-router)\n- [How to paginate an in memory array](https://www.devdecks.io/2022-in-memory-pagination-by-example)\n"},{"slug":"2022-adding-a-guard-to-a-block","category":"blog","title":"How to add a guard to a block in Ruby","description":"Learn how to add a guard to a block in Ruby","tags":["ruby"],"body":"\n\"I don't want specific items in this array to be processed by this ruby block\" is [another](https://www.devdecks.io/2022-breaking-out-of-a-block) scenario often faced when programming in Ruby. Like the post on [extiting from a block](https://www.devdecks.io/2022-breaking-out-of-a-block), I think a lot of people try to `return` from the block as a first attempt, but that doesn't return from the block, it returns from the entire method, which in this case isn't the desired behavior. So when you need to exit the current iteration of a block you can use the `next` keyword. \n\n```ruby\n[1,2,3,4].each{|int| next if int == 3}\n``` \n"},{"slug":"2022-adding-and-accessing-env-vars-phoenix","category":"blog","title":"How to add and access env variables in Phoenix","description":"learn a simple env variable solution for phoenix","tags":["elixir","phoenix"],"body":"\nAdding environment variables for a Phoenix web app is fairly straightforward but if googling it can take some time to find a simple answer. In this tutorial I will show you how to set up your environment variables using a `.env` file.\n\n1. In the root of your Phoenix directory create a new `.env` file.\n2. Add that file to your `.gitignore` so you don't expose secrets to the outside world. If you accidentally forget to add this to your .gitignore and make a commit, anyone who gains to that commit will be able to view your secrets to that point.\n3. Add and export your env variables in the .env file:\n```\nexport STRIPE_API_KEY=\"some test_key\"\n```\n4. On your terminal execute `source .env` from the root directory of your project.\n\n\nFollowing the execution of that last step you will be able to access environment variables throughout your project through: \n```\nSystem.get_env(\"STRIPE_API_KEY\")\n```\n\nIn my case I made reference to this config value in `config.exs`:\n```\nconfig :stripity_stripe, api_key: System.get_env(\"STRIPE_API_KEY\")\n```\n"},{"slug":"2022-alias-module-explained","category":"blog","title":"Elixir: alias __MODULE__ explained","description":"What does alias __MODULE__ do in elixir","tags":["elixir"],"body":"\nWhen you come across the code below in Elixir it is fairly reasonable to assume you are aliasing the module in which it is used. But what does it allow you to do?\n\n```\ndefmodule Engine.Middelware do \n\talias __MODULE__\nend \n```\n\nAfter using `alias __MODULE__` like code above does, we can more simply create or reference the struct for `Engine.Middelware` throught this modules code. Since we’ve aliased the `Middleware` module, we can now refer to Middleware structs as `%Middleware{}` instead of `%Engine.Middelware{}`. "},{"slug":"2022-breaking-out-of-a-block","category":"blog","title":"How to break out of a block in Ruby","description":"How to break out of a block in Ruby","tags":["ruby"],"body":"\nWhen first learning to program in Ruby it can be difficult to find an answer to the question; \"I need to stop iterating this collection once I find the desired element\". I think a lot of people try to `return` from the block as a first attempt, but that doesn't return from the block, it returns from the entire method, which in this case isn't the desired behavior. \n\nSo when you need to exit a block early you can use `break` to handle this, it will exit the block and return control back the method the block was running in.\n\nThis is different from if you want to just skip the current iteration of the block, in that event you would want to use the [next](https://www.devdecks.io/2022-adding-a-guard-to-a-block) keyword.\n\n```ruby\n[1,2,3,4].each{|int| break if int == 3}\n``` \n\nOr if you want to assign a value before breaking:\n```ruby\n[1,2,3,4].each do |int| \n  if int == 3\n    @desired_number = int\n    break\n  end\nend\n```\n"},{"slug":"2022-check-if-a-module-exists-in-class","category":"blog","title":"Check if a module has been included in a class in ruby","description":"check if module included in class ruby","tags":["ruby"],"body":"\nWhen programming in ruby you may have to reach for a module that has encapsulated some helper functions that you want to use in your class. To tell if the module has been included in your class you can use the `Module` classes `include` method. Likewise, to tell if you choose to extend the module you can check that through the `extend` method.\n\nBelow is a working example. Notice we do not need to instantiate our classes to invoke these methods:\n\n```\nmodule SomeModule\n  def self.included(base)\n    p base.inspect\n  end\n\n  def self.extended(base)\n    p base.inspect\n  end\nend\n\nclass IncludedClass\n  include SomeModule\nend\n\nclass ExtendedClass\n  extend SomeModule\nend\n```\n\nRunning this script will print:\n```\n\"IncludedClass\"\n\"ExtendedClass\"\n```\n\nTo fill your hearts desire for more ruby programming blog posts check out [this one](https://www.devdecks.io/2022-breaking-out-of-a-block)."},{"slug":"2022-check-list-contains-value-in-elixir","category":"blog","title":"Check if an Elixir List has specific value","description":"example of how to check an elixir list for a value","tags":["elixir"],"body":"\nTo check if an elixir `List` contains a specific value we utilize the `Enum` module which defines a function `member/2`. The two arguments this function accepts as parameters are the enum itself, in this case a `List` and the value you want to check for. The function will return a boolean. Below is an example usage:\n\n```\niex(3)> list = [\"cat\", \"dog\", \"turtle\"]\n[\"cat\", \"dog\", \"turtle\"]\niex(4)> Enum.member?(list, \"cat\")\ntrue\n```\n\n"},{"slug":"2022-checklist-for-creating-uniform-urls","category":"blog","title":"Checklist for creating uniform URL scheme","description":"Uniform URL scheme checklist","tags":["web urls"],"body":"\nThis post is a list of considerations and todo's for creating uniform URLs in your application, it does not cover implementation:\n\n1. Check the URL matches your custom scheme\n2. Ensure they use the HTTP protocol\n3. Check for leading whitespace\n4. Check for trailing whitespace\n5. Check for trailing slashes\n"},{"slug":"2022-class-eval-with-file-and-line copy","category":"blog","title":"class_eval with execution lines","description":"learn how to get the execution line when using class_eval","tags":["ruby"],"body":"\nIf you find yourself using Ruby's `class_eval` method to define some functions within a multi-line string, you may have difficult troubleshooting should an error occur in one of the functions you define.\n\n```ruby\nclass SomeObject\n  %w(method_name_1 method_name_2).each do |method|\n    class_eval <<-RUBY\n      def #{method}\n        raise\n      end\n    RUBY\n  end\nend\n```\n\nIn the code above I define two methods (`method_name_1`, `method_name_2`) on the `SomeObject` class using `class_eval`. Each method will raise an error. Now when that error is raised, it will be hard to debug because there will be no coherent backtrace, since we are metaprogramming in this way ruby doesn't know where the error occurred.\n\nIn order to get details of where the error occurred when using `class_eval` in this manor, you will need to pass two arguments to the ruby multiline string, `__FILE__` and `__LINE__ + 1`. Now when you that error is raised you will have an accurate account of where it occurred within your program.\n\n```ruby\nclass SomeObject\n  %w(method_name_1 method_name_2).each do |method|\n    class_eval <<-RUBY, __FILE__, __LINE__ + 1\n      def #{method}\n        raise\n      end\n    RUBY\n  end\nend\n```\n\nRuby dooby doo, says Scooby at a ruby conference. If you want to make Scoob happy, check out this post [Convert nested array to hash in Ruby](https://www.devdecks.io/2022-convert-nested-array-to-hash).\n\n"},{"slug":"2022-configure-git-and-remote","category":"blog","title":"Steps to configure Git and remote origin","description":"Learn how to configure Git and remote origin","tags":["git"],"body":"\nThese were the steps I took to setup Git on my new computer to work with Github through SSH.\n\nFirst, set your global git config on your machine. I am using a Mac so Git came preinstalled. You'll want to configure your username and email associated with your account using the commands below.\n```\ngit config --global user.name \"coldsoup23\"\ngit config --global user.email \"coldsoup23@gmail.com\"\n```\n\nThen to push your commits using SSH you will need to create a new public / private key pair:\n```\nssh-keygen -t rsa\n```\n\nOn a Mac this will create a file at `/Users/username/.ssh/id_rsa` and also `/Users/username/.ssh/id_rsa.pub`.\n\nYou will need to add the contents of the pubic key to your Github profile, you can print the contents to your terminal using the command:\n```\ncat /Users/username/.ssh/id_rsa.pub\n```\n\nLastly, you will need to paste that into your Github profile:\n1. Click on your profile\n2. Click SSH keys at settings\n3. Click SSH and GPG keys\n4. Add a new key and paste the contents of id_rsa.pub\n\nAfter that last step you will be configured to use Git on your local machine and push commits to a remote origin, in this case, Github.\n\nIf you found this post juicy, wait until you check out [How to run two different git branches locally](https://www.devdecks.io/2022-running-two-git-branches-locally)\n"},{"slug":"2022-convert-nested-array-to-hash","category":"blog","title":"Convert nested array to hash in Ruby","description":"Learn how to convert nested array to hash in Ruby","tags":["ruby"],"body":"\nLet's say you have a complex data structure containing nested arrays like this:\n\n```ruby\narr = [\n  [:id, 233],\n  [:name, \"ruby tuesday\"],\n  [:email, \"ruby@tuesday.com\"]\n]\n```\n\nAnd you want to convert it to a hash where the keys of the hash are the first element of each subarray and the keys value is the second item in the subarray. you can accomplish using the `Hash` classes class method `[]`, like so:\n\n```ruby\nHash[arr]\n=> {:id=>233, :name=>\"ruby tuesday\", :email=>\"ruby@tuesday.com\"}\n```\n\nLooking for more red jewel programming insights? Why not head over to [Ruby [0..-2] explained](https://www.devdecks.io/2022-ruby-0..-2-explained), or [Dynamically add methods in ruby with define_method](https://www.devdecks.io/2022-dynamically-add-methods-with-def-method)."},{"slug":"2022-count-of-each-item-in-elilxir-list","category":"blog","title":"Elixir List count of each unique element","description":"Get a count of elements occurance in Elixir List","tags":["elixir"],"body":"\nThere may come a time where you need to get a count of how many times a specific element occurs in a List. It might be needed for reporting, or to show to a user in an admin dashboard.\n\nTo accomplish this in Elixir you can use the `Enum.frequencies/1` function. This function will take one argument, the enumerator, and return map with each unique element and it's occurence count.\n\n```elixir\nEnum.frequencies([\"football\", \"baseball\", \"baseball\", \"hockey\", \"baseball\"])\n=> %{\"baseball\" => 3, \"football\" => 1, \"hockey\" => 1}\n```\n\nFurther reading:\n- [Rendering a LiveView template outside of router](https://www.devdecks.io/2022-rendering-liveview-template-outside-of-router)\n- [How to paginate an in memory array](https://www.devdecks.io/2022-in-memory-pagination-by-example)\n"},{"slug":"2022-create-and-execute-db-view-postgres","category":"blog","title":"Postgres: create and execute database view","description":"learn about views and how to execute them in postgres","tags":["ruby"],"body":"\nThere is a lot that happens behind the scenes in modern SQL databases. I say this because so many of our interactions with databases happen through libraries and ORM’s in the web frameworks we use. The danger there is it can be easy to not learn as much about database’s as developers of the past have had to, so when a cryptic issue arises, it can take much longer to bring to a resolution. The title topic, postgres views, can be one of those easily areas. \n\nThere are a few different types of views (read-only, materialized, updatable), but here we will focus on read only views. Two of the use cases for using view:\nHide the complexity of a complex query. If you create a view that encapsulates a complex query, it can be well named for simpler understanding as to the queries purpose and also reused to make even more complex queries more readable:\n\n```\nCREATE VIEW all_decks AS complex_multi_level_join_query;\n\nSELECT * FROM all_decks INNER_JOIN other_query;\n```\n\nLimit exposure to tables for non administrators. In this case you would create a view containing only columns / tables you want to expose and give those users access only to that view.\n\nCreating and executing a view:\nThis was covered above, but for explicitness you can create a view through the `CREATE VIEW` SQL keywords. Example:\n```\nCREATE VIEW all_decks AS SELECT * FROM decks;\n```\nAnd then to use that view:\n```\nselect * from all_decks;\n```\n\nI think it’s worth noting if you create a view using the asterisk wildcard, only the columns existing at the time of view creation will be captured within that view. Said differently, if you add columns to the table the view was created for, the new columns will not be accessible in that view.\n\nIf you enjoyed that post on views, you might also enjoy a trip to the Great Smoky Mountains, or [this post](https://www.devdecks.io/2022-pg_ctl-vs-psql) on `psql` vs `pg_ctl`.\n"},{"slug":"2022-create-and-execute-stored-procedure-postgres","category":"blog","title":"Postgres: create and execute stored procedure","description":"learn about stored procedures how to execute them in postgres","tags":["postgres"],"body":"\nSimilar to the previous post on [database views](https://www.devdecks.io/2022-create-and-execute-db-view-postgres), stored procedures are something we don’t use quite as frequently in modern software development. They are essentially functions you can execute against a database and like functions they accept parameters to make them dynamic.  \n\nStored procedures are not used frequently in modern web development for a variety of reasons but a some of the bigger ones are: \nThey are slow to write\nNon trivial to change\nUncommon knowledge in today's dev environment, making maintenance more challenging.\n\nThey can be useful though if you and your team are open to using SQL for handling some business logic.\n\nTo illustrate this through example, let’s create a stored procedure called `update_status` that updates the status of a report:\n\nFirst you need to define the procedure and declare any arguments that may be needed, as well as the language, then finally the actual procedure to take place. Also note if you’re not used to reading SQL the $$ is a string literal.\n```\ncreate or replace procedure report_status_update(\n   new_status varchar(20),\n   report_id int\n)\nlanguage plpgsql    \nas $$\nbegin\n    update reports \n    set status = new_status\n    where id = report_id\n    commit;\nend;$$;\n```\n\nYou can execute this stored procedure using:\n```\ncall report_status_update(‘COMPLETE’, 2)\n```\n"},{"slug":"2022-create-new-map-using-keys-of-existing-map","category":"blog","title":"Create new map using keys of existing map","description":"Create new map using keys of existing map","tags":["elixir"],"body":"\nLet's start the party by defining an Elixir Map that we will use to pull keys from to create our new map:\n```\npinteresting = %{\n  pumpkin: true,\n  snowfall: false,\n  apple: true,\n  pine_tree: false\n}\n```\n\nNow to complete the objective of this titled blog post we will reach from the `Map` module and the `split/2` function on that module. This function accepts a map as its first argument and a list of keys as a second argument. The function will use the keys defined in the second argument to create the new map containing only those keys and it will also return another map containing the remaining keys. Example below:\n```\n=> {truly_pinteresting, not_very_pinteresting} = Map.split(pinteresting, [:pumpkin, :apple])\n{%{apple: true, pumpkin: true}, %{pine_tree: false, snowfall: false}}\n```\n\nIn the above you can see that we are returned a two item tuple, containing the previously mentioned maps. The first with all the keys we passed as the second argument to `split/2`. The second is a map containing the remaining keys.\n\nAnd because Elixir is immutable we still have access to the original object, unchanged:\n```\n=> pinteresting\n%{\n  pumpkin: true,\n  snowfall: false,\n  apple: true,\n  pine_tree: false\n}\n```\n\nNow if you need to remove multiple k/v pairs there is a `drop` function on the `Map` module that can be utilized. I review that [here](https://www.devdecks.io/2022-remove-single-key-value-pair-from-map).\n\n"},{"slug":"2022-creating-an-elixir-project-without-phoenix","category":"blog","title":"How to create a mix/Elixir project without Phoenix","description":"creating a mix project","tags":["elixir"],"body":"\nIn Elixir use mix to create projects, Phoenix is just an Elixir library. You can use `mix new project_name` to generate a project and just not include Phoenix as a dependency. To run `mix new` you need to have both mix and elixir installed and in your PATH.\n\n<image src=\"/images/blog/mix-project-generation.png\" alt=\"mix-project-gen\" />"},{"slug":"2022-database-server-vs-database","category":"blog","title":"Database server vs database","description":"Walk through the difference between a database server and a database","tags":["postgres"],"body":"\nAs a software engineer you'll often hear about and interact with databases, but then you will inevitably hear of a database server and it's easy to think that these two concepts are on in the same. That is not the case. In this post I will walk through a brief overview of what differentiates these two terms.\n\n<h2>Database Server</h2>\nA database server is the computer/server under which databases will exist. It is what knows how to create databases and manage their data. You can install multiple database servers on a single physical machine.\n\n<h2>Database</h2>\nWithin a database server can exist many databases. These are the objects that contain your database tables, among other objects like database functions, indexes, and views.\n\nThe main takeaway here is that a database exists within the context of a database server and a database server exists as an application on physical or virtual hardware.\n\nEver seen a coyote share a meal with a barred owl? That would be a sight. While we wait for that day to come, you may enjoy a post on [Postgres backslash commands](http://www.devdecks.io/2022-postgres-backslash-commands)."},{"slug":"2022-dns-system-request-flow-explained","category":"blog","title":"DNS system request flow explained","description":"Explain how a DNS system handles requests","tags":["dns"],"body":"\nA DNS system takes a *fully qualified domain name and translates it into your web server's IP address. There are a few steps a DNS system takes to handle this translation. This translation is also referred to as resolving a domain name.\n\nThe DNS resolution will occur before your actual web server is accessed because your web server can only be accessed using its IP address.\n\nTo resolve a DNS request:\n\n1) A browser or other HTTP client sends a request to www.devdecks.io.\n2) Your browser will first reach out to a DNS server known as a resolver. This is the server that is responsible for making all of the requests needed to handle the domain name translation and will ultimately send your resolved IP address back to your client. It is typically run by your local internet service provider (ISP).\n3) The Resolver first talks to a **Root Name Server** (behind the scenes this is a grouping of name server's, but it will only reach out to one). This server is responsible for interpreting the top level domain, eg .com, .io, .org, etc. Once it has deciphered the top level domain, it will return a pointer to the resolver. That pointer is the address of the appropriate top level domain name server, each top level domain will have a set of servers responsible for the next step in the request chain.\n4) Using that pointer the resolver then reaches out to the **Name Server** for .io domains. This will check the requests domain (devdecks) and respond to the resolver with a pointer to the **DNS Provider Server**. The name server knows where to look for this because when you registered your domain name, your dns provider made an entry into the .io name server with a pointer back to their system.\n5) Using this pointer the resolver reaches out to the DNS server for devdecks, which responds with the IP address. It knows about this domain entry because when you registered the domain name you created a hosted zone in the registrars system. The hosted zone contains the details of your domain name, including your IP address.\n6) The resolver returns the IP address to the http client.\n\nThis IP address is then used by your browser client to issue the request to your web server.\n\nTL/DR:\n1) HTTP request made to www.devdecks.io.\n2) This request first hits a resolver.\n3) The resolver reaches out to the root name server for the IP of the name server.\n4) The resolver reaches out the name server for the DNS server IP.\n5) The resolver reaches out the the DNS server for the IP of your web server.\n6) HTTP client makes a request to the IP for www.devdecks.io.\n\n*Fully qualified domain name: the complete domain name a web server can be reached at. For example www(subdomain).devdecks(domain).com(root domain). This does not include the http(s) protocol.\n\nContinued reading:\n- [How subdomains work with dns](https://www.devdecks.io/2022-how-do-subdomains-work-with-dns){:target=\"_blank\"}\n- [Same database table parent/child relationship using Rails](https://www.devdecks.io/2021-same-db-table-parent-child-relationship-rails){:target=\"_blank\"}\n\n"},{"slug":"2022-dynamically-add-methods-with-def-method","category":"blog","title":"Dynamically add methods in ruby with define_method","description":"Dynamically add methods in ruby with define_method","tags":["ruby","metaprogramming"],"body":"\nIn a recent post I went over adding methods dynamically with [method_missing](https://www.devdecks.io/2022-dynamically-add-methods-with-method-missing). I also issued a word of caution when overriding `method_missing` in that manor.\n\nIt turns out there is a better way to handle an event where you need to define methods at runtime in ruby, through the use of `define_method`. The benefit to using `define_method` in this case is it will have any unintended side effects like `method_missing` does with impacting [respond_to?](https://www.devdecks.io/2022-dynamically-add-methods-with-method-missing).\n\nIn the code below I use `define_method` to add attribute methods to the `Account` class. When this file is first read by the ruby interpreter it will iterate the `@@attributes` array and create the setter methods. Then we can use them later on in our code, like where the example below illustrates when we set a value for email.\n\n```\nclass Account\n  @@attributes = [:email, :first_name, :last_name]\n\n  @@attributes.each do |name|\n    define_method(:\"#{name}=\") do |value|\n      @attributes[name] = value\n    end\n  end\n\n  def initialize\n    @attributes = {}\n  end\nend\n\nAccount.new.email = \"wizbang@buck.com\"\n```\n\nIf it's not clear, what makes this dynamic is our code is defining the attribute methods for us inside of `define_method` as it runs rather than us declaring them within our code.\n\nI've seen this used in production where a remote API contains data you want to attach to a class in a different ruby/rails app. The data is fetched from the API and `define_method` is used to attach that data to the model.\n\nFurther reading:\n- [Handling system authentication in software engineering](https://www.devdecks.io/2022-system-auth-in-software-engineering)\n- [How to login to ngrok on the command line](https://www.devdecks.io/2022-login-to-ngrok-on-the-command-line)\n"},{"slug":"2022-dynamically-add-methods-with-method-missing","category":"blog","title":"Dynamically add methods in ruby with method_missing","description":"Dynamically add methods in ruby with method_missing","tags":["ruby","metaprogramming"],"body":"\n*Note if you need to define methods dynamicallly I found a better way to do so with the [define_method](https://www.devdecks.io/2022-dynamically-add-methods-with-def-method), but if you're interested in learning about overriding `method_missing` or another way of dynamically adding methods in ruby, please read on.\n\nWhen you call a method that doesn’t exist in ruby, internally ruby will call it’s own `method_missing` method, which will raise the undefined method error:\n\n```\nhello_world\n=> `<main>': undefined local variable or method `hello_world' for main:Object (NameError)\n```\n\nBut if needed you can override the default `method_missing` implementation with behavior to suite your applications needs.\n\nFor example you could use `method_missing` to catch unknown methods and define them dynamically. In the implementation below `ActiveRecordImplementation` initializes an empty hash of attributes which `method_missing` will reference and add to if the attribute does not currently exist on the object.\n\n```\nclass ActiveRecordImplementation\n  attr_reader :attributes\n\n  def initialize\n    @attributes = {}\n  end\n\n  def method_missing(name, *args, &block)\n    if name.end_with?(\"=\")\n      @attributes[name.to_s[0..-2].to_sym] = args.first\n    else\n      @attributes[name]\n    end\n  end\nend\n\nActiveRecordImplementation.name = \"Jimmy Bones\"\n```\n\nIf it's not clear, what makes this dynamic is our code is defining the attribute methods for us inside of `method_missing` as it runs rather than us declaring them within our code.\n\nA note of caution in using this, if you’re not careful overriding method_missing can cause other issues with ruby behavior, a noted example is with `respond_to?`. It may be helpful to include a default conditional that just calls the ruby implementation by calling `super` in this case.\n\nFurther reading:\n- [Handling system authentication in software engineering](https://www.devdecks.io/2022-system-auth-in-software-engineering)\n- [How to login to ngrok on the command line](https://www.devdecks.io/2022-login-to-ngrok-on-the-command-line)\n"},{"slug":"2022-ecto-convert-query-to-sql","category":"blog","title":"Ecto: convert query to sql","description":"how to convert an ecto query to sql","tags":["elixir","ecto"],"body":"\nThere may come a time in your Ecto life where you want to know what the actual SQL statement is that the Repo module is generating for you. When that special time comes, you have a wonderful function you can leverage that exists on the `Ecto.Adapters.SQL` module, `to_sql/3`. To use this function you need to pass the Repo function (expressed as an atom) and the `Ecto.Query` as arguments. Example:\n\n```\nquery = from s in \"stores\", select: s.name\nEcto.Adapters.SQL.to_sql(:all, query)\n```\n\nIn a [previous post](http://localhost:4000/2022-ecto-direct-sql-query){:taget=\"_blank\"} I detailed how if you're using one of these Ecto database adapters:\n1. Postgres\n2. MySQL\n3. SQLServer\n\nThen you don't need to use the `Ecto.Adapters.SQL` module because the `.to_sql` function will be imported into your Repo module.\n\nIf you found this post helpful you might also like [Ecto: example inner join query](https://www.devdecks.io/2022-example-ecto-inner-join-query).\n"},{"slug":"2022-ecto-delete-associated-records","category":"blog","title":"Ecto: delete associated records","description":"how to delete associated records in ecto","tags":["elixir","database"],"body":"\nIf you have a one to many or many to many association in your Ecto schema and you need to handle deleting all associated records when the primary record is deleted `Ecto.Schema` includes a keyword option you can pass to your association `on_delete: :delete_all` that you can utilize. This will make sure that all child records are deleted before the operation is complete:\n\n```\nhas_many :items, on_delete: :delete_all\n```\n\nInterest in more Ecto options? I wrote on post on [setting primary keys](https://www.devdecks.io/2022-set-a-primary-key-ecto) you can find [here](https://www.devdecks.io/2022-set-a-primary-key-ecto)."},{"slug":"2022-ecto-direct-sql-query","category":"blog","title":"Ecto: using SQL for a query","description":"using sql with ecto","tags":["elixir","ecto"],"body":"\nThe Ecto library has a large number functions we can leverage to query the database without writing SQL. These are mostly found on the `Ecto.Repo` module, for example `Repo.get/3`, `Repo.all/2`, `Repo.aggregrate/3`, etc.\n\nBut what if you need to write a more complicated SELECT or INSERT? For this circumstance you can leverage the `Repo.query/3` as long as your application is using the Postgres, MySQL, or SQLServer database adapter. The `query` function along with [additional sql functions](https://hexdocs.pm/ecto_sql/Ecto.Adapters.SQL.html) are injected into the `Repo` module if you are using one of those adapters. A screenshot of available functions:\n\n<image src=\"/images/ecto-sql-query-adapter-functions.png\" alt=\"ecto: query adapter functions\" />\n\nIf you're not using one of the previously mentioned database adapters you can still get access to these helper functions by importing the `Ecto.Adapters.SQL` module into your project.\n\nAn example use of `Repo.query`:\n```\nRepo.query(\"select id, name from stores where id >= 10\") \n```\n\nIf you found this post helpful you might also like [Ecto: example inner join query](https://www.devdecks.io/2022-example-ecto-inner-join-query).\n"},{"slug":"2022-ecto-insert_all-returning-nil","category":"blog","title":"Ecto: insert_all returning nil","description":"return vals from insert_all","tags":["elixir","ecto"],"body":"\nBy default `Repo.insert_all` will return a tuple of the count of objects that were inserted and nil. If you want to return values for the inserted data, you need to explicitly do so by specifying a “returns” option. That looks like this in practice:\n\n```\nRepo.insert_all(\"store\", [%{name: \"Foot Locker\"}, %{name: \"Subway\"}], returning: [:uuid, :name])\n#=> {2, [%{uuid: “dsf45-fdf-1234”, name: \"Foot Locker\"}, %{uuid: “gggf45-ff-11233”, name: \"Subway\"}]}\n````\n"},{"slug":"2022-ecto-return-count-of-records","category":"blog","title":"Ecto: return a count of records","description":"ecto records count","tags":["elixir","ecto"],"body":"\nTo handle aggregates in Ecto there is a utility function we can leverage on `Repo` called `aggregate/3`. This function takes three arguments but the third is optional:\n1. The database table name\n2. The desired aggregate operation (in this case count)\n3. A field to count\n\nBelow is an example of executing the function:\n```\nRepo.aggregate(“stores”, :count, :uuid)\n=> 4\n```\n"},{"slug":"2022-elixir-enum-fetch-vs-find","category":"blog","title":"Elixir Enum fetch vs find functions","description":"Differences between elixirs fetch and find","tags":["elixir"],"body":"\nIn Elixir the `Enum` modules `fetch/2` and `find/3` methods sound a little similar at first thought, this post will share what makes them similiar, different, and provide examples.\n\n`fetch/2` and `find/3` are similarity in that their job is to locate a specific element inside of an enumerable object. However these functions handle this task quite differently. `fetch/2` will take in an enumerable and an index value as parameters and return a tuple with the matched element at the index value parameter provided. `find` on the other hand will accept three arguments, an enumberable, an optional default value, and a callback function and return the first matched element found in the callback function.\n\n```elixir\nEnum.find([2, 3, 4], fn int -> int == 2 end)\n=> 2\n```\n\n```elixir\nEnum.fetch([2, 3, 4], 0)\n=> {:ok, 2}\n```\n\nI have also written another `Enum` post on [iterating a List with_index in elixir](https://www.devdecks.io/2022-list-with-index-in-elixir-example) if you're interested."},{"slug":"2022-elixir-ternary-operator","category":"blog","title":"Elixir ternary operator","description":"elixir-ternary-operator-equivalent","tags":["elixir"],"body":"\nIf you’re coming into elixir from a language like Javascript or Ruby you are familiar with ternary expressions and how to use them to simplify conditionals. In practice they look something like this:\n\n```\nconst val = condition ? truthy_handler : falsy_handler\n```\n\nIn elixir it is handled differently, the most common and frequently used way being:\n\n```\nif(condition, do: truthy_handler, else: falsy_handler)\n```\n\nIf you like conditions, you might also enjoy the post [Get the index position from element in a matched condition](https://www.devdecks.io/2022-get-index-of-a-matched-conditions-element).\n"},{"slug":"2022-ensure-all-tests-pass-before-commit-elixir","category":"blog","title":"Elixir: ensure all tests pass before commit","description":"using pre-commit in eliixr","tags":["elixir"],"body":"\nIf you want to run automated tests or a formatter before making a git commit in your project there is a helpful Elixir library called `elixir-pre-commit`. This library is a hook that will run before a commit is finalized. The module works by overwriting your pre-commit file in your `.git/hooks` directory.\n\nTo use the library add it to your deps in `mix.exs` and update your dependencies with `mix deps.get`.\n\n```\ndef deps do\n  [{:pre_commit, \"~> 0.3.4\", only: :dev}]\nend\n```\n\nAnd then you will need to add the config to your development config. In Phoenix applications that would be `.config/dev.exs`. Below is an example configuration, the verbose keyword is optional but helps with debugging:\n\n```\nconfig :pre_commit,\n  commands: [\"formatter”, \"test\"]\n  verbose: true\n```\n\nNow when you run `git commit` within this project your formatter will be run and then your test suite, if either of those fail then the commit will not succeed.\n\nIf you enjoyed this post you may also enjoy [Helper function for setting default Struct key](https://www.devdecks.io/2022-helper-function-set-default-struct-key).\n"},{"slug":"2022-example-ecto-inner-join-query","category":"blog","title":"Ecto: example inner join query","description":"example of how to write a join query in ecto","tags":["ecto","elixir"],"body":"\nTo write an inner join query using Ecto we will need to reach for the `Ecto.Query` module. This will give us access to a keyword-based approach to writing queries. This module was designed to be expressive and closely mimic SQL queries using keywords.\n\nBelow is an example using a single inner join. In this query we join the `employees` and `stores` tables using the `join:` keyword and return the store and employee names as a map. You'll notice we create two variables we can reference in our queres `e` and `s` respectively, these are known as query bindings:\n```\nimport Ecto.Query\n\nquery = from s in \"stores\",\n          join: e in \"employees\", on: s.id == e.store_id,\n          where: s.id > 10,\n          select: %{store: store.name, employee: e.name}\nRepo.all(query)\n```\n\nBelow is an example using multiple inner joins. In this query we join the `employees` and `stores` tables again but then also join the `schedules` table using an additional `join:` keyword and then return a value for scheduled in our select:\n```\nimport Ecto.Query\n\nquery = from s in \"stores\",\n          join: e in \"employees\", on: s.id == e.store_id,\n          join: sc in \"schedules\", on: sc.employee_id == e.id,\n          where: s.id > 10,\n          select: %{store: store.name, employee: e.name, scheduled: sc.scheduled}\nRepo.all(query)\n```\n\nIf you found this post helpful you might also like [Ecto: using SQL for a query](https://www.devdecks.io/2022-ecto-direct-sql-query)."},{"slug":"2022-execute-task-inside-rails-app","category":"blog","title":"How to execute a task inside a Rails app","description":"execute a task inside a Rails app","tags":["rails"],"body":"\nSometimes we want to be able to execute a rails command inside our actual applications. In my instance I wanted to be able to create and run database migrations dynamically. \n\nFor this all you need to do is call the task with backticks. In the example below any instance call to `build_form` will generate a migration using the form name.\n```\nclass FormEngine\n attr_reader :form\n \n def initialize(form)\n   @form = form\n end\n \n def build_form\n   `rails g migration create_form_#{form.name}`\n end\nend\n```\n\nYou can execute the above using: \n```\nFormEngine.new(Form.new(name: \"signup\")).build_form\n```\n\nHe is an example of the generated file:\n\n<image src=\"/images/migration-ss.png\" alt=\"migration\" />\n"},{"slug":"2022-exiting-elixir-iex-options","category":"blog","title":"Options for exiting Elixirs IEx.pry debugger","description":"How to an IEx debugger in Elixir","tags":["elixir","iex"],"body":"\nI've found myself getting stuck on this a few times and wanted to have a list of options for handling this but couldn't find exactly what I was looking for. I hope this helps you!\n\nAfter you require the IEx module invoking the `IEx.pry` function it in your codebase like so:\n```elixir\nrequire IEx\n\ndefmodule SomeModule do\n  def my_function \n    some_var_1 = \"data\"\n    some_var_2 = [\"data2\", \"data3\"]\n    IEx.pry\n  end\nend\n\nSomeModule.my_function\n```\n\nWhen the `IEx.pry` function is called your application will pause and allow you to inspect the current runtime environment. Once you are done with your inspection you can break out of the debugger with the following options:\n1. `respawn` \n2. CTRL + c \n\nCalling `respawn` allows you to resume code execution by starting a new IEx shell and releasing the current one.\n\nCTRL + C will kill your running process(es).\n"},{"slug":"2022-export-sql-to-csv-or-stdout","category":"blog","title":"Export SQL records to CSV or STDOUT","description":"Export SQL records to CSV or STDOUT","tags":["sql"],"body":"\nIf you need to export SQL to a file, particularly a CSV you can do so using the `COPY` command. The `COPY` command has a few different options we will use to achieve this goal, namely `TO`, `DELIMITER`, `CSV` and `header`.\n\n`TO` will specifiy where to dump the results. `CSV` specifies what type of file to create, while `HEADER` will make sure the first row of the file is allocated to column headers. `DELIMITER` denotes the character to separate the columns from within the file.\n\nBelow is an example of the command I tried to use to handle this:\n```sql\nCOPY (SELECT * FROM users where users.organization_id='123') TO '/path/to/newfile' WITH DELIMITER ',' CSV HEADER;\n```\n\nI mentioned I \"tried to\" use this command, as often happens in tech it was not so straightforward much like solving the [sql ordering timeout](https://www.devdecks.io/2022-sql-timeout-ordering). This time I received an error because I didn't have root access to the sql server and was met with the error:\n\nERROR:  must be superuser or a member of the pg_write_server_files role to COPY to a file\n\nHINT:  Anyone can COPY to stdout or from stdin. psql's \\copy command also works for anyone.\n\nSo I listened to the HINT and printed my results to STDOUT in my terminal. This is what the resulting command looked like:\n\n```sql\nCOPY (SELECT * FROM users where users.organization_id='123') TO STDOUT;\n```\n\nPrinting to STDOUT is more helpful if you have unlimited scroll back set in your terminal. If you’re using iterm on a Mac you can enable this through:\npreferences -> profiles -> unlimited scroll back. \n\nWithout that you would only see the last 1000 rows printed.\n\nFurther reading:\n- [SQL inner join not returning records](https://www.devdecks.io/2022-sql-inner-join-not-returning-records)\n- [Validating a string is a URL in Rails](https://www.devdecks.io/2022-validating-string-is-a-url)\n"},{"slug":"2022-function-not-being-called-in-jest-test","category":"blog","title":"Tip: function not being called during Jest test","description":"mock function not triggering actual function","tags":["jest","javascript"],"body":"\nI found myself in a situation where I knew a function was being invoked I couldn’t see the `console.log` I added to the function being printed to the terminal when I ran my test.\n\n\nThe issue I was facing wasn’t an issue with the code, but an issue with my understanding of the test implementation. It turned out that the function I was trying to invoke was being overwritten by a mock function in the test suite. When a mock function is declared, the original function definition is never called, but rather it is intercepted by the mock.\n"},{"slug":"2022-get-column-names-and-types-postgres","category":"blog","title":"How to get column names and their types using Postgres","description":"Learn how to get column names and their types using Postgres","tags":["postgres"],"body":"\nThere may come a time when you're working with a postgres db that contains many tables and you want some meta data about a specific table, in this instance that tables column names and its types. \n\nTo accomplish this you will first need to access your postgres database through either a library provided by the programming language you are using to interact with the database or accessing the database directly on the command line. \n\nIf you have privileged access to the database you can login to it on the command line using:\n\n```\npsql name_of_database\n```\n\nAfter you're in the database, to get the list of column names and types from a table you can use this query:\n\n```sql\nSELECT column_name, data_type FROM information_schema.columns WHERE table_name='users';\n```\n\nThis query accesses a special table in postgres called information_schema and queries for the column_name and data_type on the users table.\n\nIf you thought that article was awesome, wait until you read [Postgres pg_ctl vs psql](https://www.devdecks.io/2022-pg_ctl-vs-psql) it'll knock your socks off. If you're not wearing any socks then don't even bother reading it."},{"slug":"2022-get-index-of-a-matched-conditions-element","category":"blog","title":"Get the index position from element in a matched condition","description":"Get the index position from element in a matched condition","tags":["elixir"],"body":"\nTo achieve the desired outcome of the post title, you can use the `Enum` modules `find_index/2` function. This function will accept two arguments, the enumberable itself and a callback function as parameters. If the callback function finds a matched condition it will return that items index position. If there are more than two of the same item it will return the first matches index position. If there are no matches found, it will return `nil`.\n\n```Elixir\nEnum.find_index([\"football\", \"baseball\", \"hockey\", \"basketball\"], fn sport -> sport == \"hockey\" end)\n=> 2\n\nEnum.find_index([\"football\", \"baseball\", \"hockey\", \"hockey\"], fn sport -> sport == \"hockey\" end)\n=> 2\n\nEnum.find_index([\"football\", \"baseball\", \"hockey\", \"hockey\"], fn sport -> sport == \"soccer\" end)\n=> nil\n```\n\nFurther reading:\n- [Rendering a LiveView template outside of router](https://www.devdecks.io/2022-rendering-liveview-template-outside-of-router)\n- [How to paginate an in memory array](https://www.devdecks.io/2022-in-memory-pagination-by-example)\n"},{"slug":"2022-git-nuke-and-pave","category":"blog","title":"Git: nuke and pave","description":"deploy to staging or test using gits nuke and pave strategy","tags":["git"],"body":"\nOn some programming teams, you might not need permission to push your code changes to a test/staging environment. There is likely a dedicated test/staging/regression branch your team will use to push testing changes to. In that circumstance, when you want to execute a test environment build you have a couple of options many of us are familiar with:\n1. Merge your changes into the testing branch through `git merge`.\n2. Merge your changes into the testing branch through `git rebase`.\n\nAn issue that might come up though is you might not need whichever changes currently exist in the regression branch, it’s possible someone already pushed testing changes to that branch that you don’t need. To get around this dilemma you can use a strategy known as nuke and pave. It works like this:\n1. From your current branch, delete the current local testing branch `git branch -D staging`.\n2. Create a new regression branch from your branch `git checkout -b staging`.\n3. Force push your branch `git push origin -f staging`.\n\nThat should trigger your build hooks to start deploying your changes to your testing environment. "},{"slug":"2022-handle-controller-responses-in-before-action","category":"blog","title":"Handle controller responses using Rails before_action","description":"How to handle controller responses using Rails before_action","tags":["rails"],"body":"\nUsing Rails `before_action` you can return an HTTP response *before* the actual controller action is invoked, in the example below, the create action. This allows you to clean up your controller code, so instead of having the create action running the code defined in `setup_request` and `verify_request` you can have a before action handle it for you.\n\nThe `head` method used below is an alias for responding only with the status given (as a symbol), headers, and an empty body.\n\n```ruby\nclass ExampleController < ApplicationController\n  before_action :verify_request, :setup_request\n\n  def create\n    # handle action if before_action's have not rendered head\n  end\n\n  private\n  def setup_request\n    head :ok unless application_exists\n  end\n\n  def verify_request\n    head :unauthorized unless auth_token.present?\n  end\nend\n```\n"},{"slug":"2022-helper-function-set-default-struct-key","category":"blog","title":"Helper function for setting default Struct key","description":"Helper function for setting default Struct key in elixir programming.","tags":["elixir"],"body":"\nSetting a default key for an Elixir Struct was something I had searched Google for and had a hard time finding a solution for. I hope this quick post is able to be the solution needed for some of you beautiful devs out there just trying your best.\n\nThe `set_struct_default` function below has an arity of three, accepting a struct, a key to set a default for and a default value. The function body checks if the struct already has a value for the key being checked, if it does it will just return the struct, otherwise it will set the default value.\n\n```\ndef set_struct_default(struct, key, default) do\n  if Map.has_key?(struct, key) do\n    struct\n  else\n    Map.put(struct, key, default)\n  end\nend\n```\n\nNote if you're trying to set a default for a schema based struct like with Ecto or Absinthe then those types libraries typically allow you to define a default for a \"field\" in the struct as a keyword list option `default: \"some default string\"`.\n\nIf you enjoyed this post you may also enjoy [Update what Ecto considers nil / empty](https://www.devdecks.io/2022-update-what-ecto-considers-empty).\n"},{"slug":"2022-how-do-subdomains-work-with-dns","category":"blog","title":"How subdomains work with DNS","description":"Explain how a DNS system handles subdomains","tags":["dns"],"body":"\nTo gain an understanding of DNS systems in general refer to this [previous post](https://www.devdecks.io/2022-dns-system-request-flow-explained){:target=\"_blank\"} on the DNS system request flow.\n\nThis post is a grouping of main takeaways I came up with with after researching subdomains:\n\n- In the URL www.devdecks.io the www is the website's subdomain. \n- A subdomain can point to an entirely separate server or all of your subdomains can point to the same server, it is up to the engineer to decide what works best for their system.\n  - Example 1: www.devdecks.io might point to a webserver but mail.devdecks.io might point to a separate mail server.\n  - Example 2: org1.mysaasapp.com might point to the same server as org2.mysaasapp.com. In this scenario the subdomains would be used in your application to decipher which organization the request is being made on behalf of.\n- You can point subdomains to a different IP address using an ARECORD that you register with your DNS provider.\n- You can point subdomains to a different domain name using a CNAME that you register with your DNS provider.\n- A wildcard DNS record allows you to point all existing and non-existing subdomains to a specific area. For example, www.example.com and test.example.com would both direct to www.example.com when a wildcard subdomain is enabled. A wildcard subdomain would be used for our previous example of org1.mysaasapp.com and org2.mysaasapp.com.\n"},{"slug":"2022-how-to-delete-characters-from-ruby-string","category":"blog","title":"How to delete characters from a string in Ruby","description":"How to delete characters from a string in Ruby","tags":["ruby"],"body":"\nIf you need to delete characters from a string in Ruby you can do so using the `#delete` method on the `String` object.\n\nYou can pass it any number of arguments you would like, for each argument passed to the method ruby will look for a substring or substrings that matches the arguments contents and remove them from the string, the returned value being the string minus any matched patterns passed to the `delete` method.\n\n```ruby\n=> \"I like pie\".delete(\"e\")\n\"I lik pi\"\n```\n\nBe careful with this though, it can sometimes have unexpected behavior. In the event you wanted to delete the word \"like\" you might try this:\n```ruby\n=> \"I like pie\".delete(\"like\")\n\"I  p\"\n```\n\nBut since \"like\" contains an \"i\" and \"e\", it method also deleted those characters from the word \"pie\".\n\nTo delete a full word, I would use [gsub](https://www.devdecks.io/2022-how-to-replace-string-content-in-ruby) like so:\n\n```ruby\n=> \"I like pie\".gsub(\"like\", \"\")\n\"I  pie\"\n```\n\n\nFurther reading:\n- [Handling system authentication in software engineering](https://www.devdecks.io/2022-system-auth-in-software-engineering)\n- [How to iterate a string containing newlines in Ruby](https://www.devdecks.io/2022-how-to-iterate-string-with-newlines-in-ruby)\n"},{"slug":"2022-how-to-delete-leading-and-trailing-whitespace-ruby-string","category":"blog","title":"How to delete the leading and trailing whitespace of a string in Ruby","description":"How to delete the leading and trailing whitespace of a string in Ruby","tags":["rails","turbo"],"body":"\n\nWhen programming, from time to time you will encounter strings in the format of `\"  some leading whitespace\"` or `\"some trailing whitespace  \"`. You can remove these spaces through the use of methods on the `String` object, `lstrip` and `rstrip`.\n\n`lstrip` will delete all the whitespace characters that are present before the first non whitespace character in a string. \n\n```ruby\n=> \"  some leading whitespace\".lstrip\n\"some leading whitespace\"\n```\n\n`rstrip` will delete all the whitespace characters that are present after the last non whitespace character in a string. \n\n```ruby\n=> \"some trailing whitespace  \".rstrip\n\"some trailing whitespace\"\n```\n\nTo delete both the leading and trailing whitespace you can use the `strip` method.\n\n```ruby\n=> \"    some leading trailing whitespace  \".strip\n\"some leading trailing whitespace\"\n```\n\nFurther reading:\n- [How to iterate a string containing newlines in Ruby](https://www.devdecks.io/2022-how-to-iterate-string-with-newlines-in-ruby)\n- [How to replace the contents of a string in Ruby](https://www.devdecks.io/2022-how-to-replace-string-content-in-ruby)\n"},{"slug":"2022-how-to-iterate-string-with-newlines-in-ruby","category":"blog","title":"How to iterate a string containing newlines in Ruby","description":"How to iterate a string containing newlines in Ruby","tags":["ruby"],"body":"\nLet's say you have a string that resembles `\"a string that \\n is really multiple paragraphs \\n\"` and you want to work with each section of the string with a newline, Ruby has a method to handle that called `each_line`.\n\n```ruby\nparagraph = []\nexample_paragraph = \"a string that \\n is really multiple paragraphs \\n\"\nexample_paragraph.each_line do |line|\n  paragraph << line\nend\n\n=> paragraph\n[\"a string that \\n\", \" is really multiple paragraphs \\n\"]\n```\n\nIt can also iterate over the string any time it encounters a substring passed to it:\n\n```ruby\nparagraph = []\nexample_paragraph = \"a string that \\n is really multiple paragraphs \\n\"\nexample_paragraph.each_line(\"really\") do |line|\n  paragraph << line\nend\n\n=> paragraph\n[\"a string that \\n is really\", \" multiple paragraphs \\n\"]\n```\n\nFurther reading:\n- [How to read Ruby open source code locally](https://www.devdecks.io/2022-how-to-read-ruby-open-source-code-locally)\n- [Handle controller responses using Rails before_action](https://www.devdecks.io/2022-handle-controller-responses-in-before-action)\n"},{"slug":"2022-how-to-pretty-print-json-ruby","category":"blog","title":"How to pretty print JSON in ruby","description":"How to pretty print a JSON object in ruby","tags":["ruby","json"],"body":"\nThe easiest way I’ve found to accomplish this is using `puts`\n\nThe call below will print the json object and return nil\n\n```\nputs data.to_json\n{\"admin\":true,\"email\":\"admin@gmail.com\"}\n```\n\nIf you need the object to be printed on a multi-line basis you can use the command line tool [jsonpp](https://github.com/jmhodges/jsonpp).\n\nAfter installing you can copy an object like the one above and paste it into its own file and then run the command:\n\n```\njsonpp path/to/file.json\n```\n\nWhich will produce the following output:\n\n```\n{\n  \"admin\": true,\n  \"email\": \"admin@gmail.com\"\n}%\n```\n\nFurther reading:\n- [Migrating to Elixir's Earmark for markdown processing](https://www.devdecks.io/2021-elixir-earmark-code-parsing)\n- [An series of introductions to Elixir Processes](https://www.devdecks.io/2021-beam-elixir-process-summary)\n\n\n"},{"slug":"2022-how-to-read-ruby-open-source-code-locally","category":"blog","title":"How to read Ruby open source code locally","description":"How to read RubyGem code locally","tags":["ruby","oss"],"body":"\nI’m sure TMTOWTDI here but I hope this helps you get started. The end goal here is to be able to run the following command in your terminal `bundle open gem_name` and have the code for the library opened in your text editor.\n\nTo start, use your bash, zsh, or other terminal shell to export a variable called `BUNDLER_EDITOR`. Bundler will use this environment variable to open the ruby gem library code in your text editor I’m using vscode and pass the appropriate command to open it `code -a .`. The full command on the terminal looks like:\n\n`export BUNDLER_EDITOR=\"code -a .\"`\n\nFrom there navigate to the ruby project that is using the gem you want to read source code for, you will need to have the gem declared in your Gemfile for this to work. After the gem you want to read is included in a ruby project, navigate to the root directory of that project on your command line and run:\n\n`bundle open gem_name`\n\nA more explicit example:\n\nGenerate a new rails project:\n`rails new test_project`\n\nOpen the Gemfile and add the YAML gem to your dependencies:\n```ruby\ngem \"yaml\"\n```\n\nNavigate to the project root directory:\n```\ncd test_project\n```\n\nOpen the source code the for yaml gem:\n```\nbundle open yaml\n```\n\nAfter running the `bundle open` command the library code for YAML should be opened in your text editor. \n\nNote that if you run the `bundle open` command without setting a value for `BUNDLE_EDITOR` you will be met with the following message:\n\n\"To open a bundled gem, set `$EDITOR` or `$BUNDLER_EDITOR`\"\n\nSo you could alternatively set a value for `$EDITOR` and you should have the same outcome. Dealers choice.\n\nFurther reading:\n- [How to handle token auth in Rails](https://www.devdecks.io/2022-how-to-handle-token-auth-in-rails)\n- [Ruby on Rails integration testing cheatsheet](https://www.devdecks.io/2022-rails-integration-testing-cheatsheet)\n"},{"slug":"2022-how-to-replace-string-content-in-ruby","category":"blog","title":"How to replace the contents of a string in Ruby","description":"How to replace the contents of a string in Ruby","tags":["ruby"],"body":"\nFor this example we will take the string `\"bacon, eggs\"` and using that string create a new string, `\"bacon, orange juice\"`, while leaving the original string intact.\n\nTo accomplish this task we will use the `String` class method `gsub`. In the most basic use case we will pass two arguments `gsub`:\n1. The contents of the string we want to replace.\n2. The replacement text.\n\nThe result will return a new string with the contents replaced:\n```\nbacon_and_eggs = \"bacon, eggs\"\nbacon_and_oj = bacon_and_eggs.gsub(\"eggs\", \"orange juice\")\n\n=> bacon_and_eggs\n\"bacon, eggs\"\n=> bacon_and_oj\n\"bacon, orange juice\"\n```\n\nIn more advanced use cases you can pass a pattern you want to match as the first argument to `gsub`.\n\nFurther reading:\n- [How to handle token auth in Rails](https://www.devdecks.io/2022-how-to-handle-token-auth-in-rails)\n- [Ruby on Rails integration testing cheatsheet](https://www.devdecks.io/2022-rails-integration-testing-cheatsheet)\n"},{"slug":"2022-in-memory-pagination-by-example","category":"blog","title":"How to paginate an in memory array","description":"How to implement pagination using Elixirs Nimblepublisher","tags":["nimblepublisher","elixir"],"body":"\nThis is an example of how you can implement in memory pagination using Elixir and NimblePublisher. If you are unfamiliar with NimblePublisher you can check out this [blog post](https://dashbit.co/blog/welcome-to-our-blog-how-it-was-made){:target=\"_blank\"} from Jose Valim and Dashbit.\n\nFirst I want to address that there are many different methods for handling pagination in an application, but what I wanted to do was paginate an in memory array, or List, in Elixir. This is a list of blog posts gets compiled with my Elixir application on startup. \n\nThe end goal here was to be able to render 10 posts per page with the first ten showing on the homepage of this website and every subsequent ten posts being displayed at https://www.devdecks.io/page/2, https://www.devdecks.io/page/3, etc.\n\nTo handle this you first need to define two routes in your `router.ex` file. You only need to define two routes if you want the same setup I have (homepage and /page), you could also just have a single route for `/page/:count`.\n\n```elixir\nget \"/\", BlogController, :index\nget \"/page/:count\", BlogController, :paginate\n```\n\nBelow is the code for accessing the list of blog posts. This code injects the NimblePublisher macro into the module which creates the `@posts` variable and then the posts are sorted by date and filtered for published posts, from there it sets the data for `@tags` and defines two getter methods for that data.\n\n```elixir\ndefmodule DevDecks.Blog do\n  alias DevDecks.Blog.Post\n\n  use NimblePublisher,\n    build: Post,\n    from: Application.app_dir(:dev_decks, \"priv/posts/**/*.md\"),\n    as: :posts,\n    highlighters: [:makeup_elixir, :makeup_erlang]\n\n  @posts Enum.sort_by(@posts, & &1.date, {:desc, Date})\n  @published_posts Enum.filter(@posts, fn (p)-> p.published end)\n  @tags @published_posts |> Enum.flat_map(& &1.tags) |> Enum.uniq() |> Enum.sort()\n\n  def all_posts, do: @published_posts\n  def all_tags, do: @tags\nend\n```\n\nThen in the controller define the two functions referenced in our router code, one for handling `index` requests and one for handling `paginate` requests.\n\nThe `index` action will only need to worry about setting state for `has_next_page` to see if a next page is available, `next_page_link`, which holds the next link for pagination and `posts` for paginated blog posts. The `paginate` action will declare an extra state value for `previous_page_link` to handle previous page navigation. The code for the `Blog` methods will be covered later.\n\n```elixir\ndefmodule DevDecksWeb.BlogController do\n  alias DevDecksWeb.Router.Helpers, as: Routes\n  use DevDecksWeb, :controller\n  alias DevDecks.Blog\n\n  def index(conn, _p) do\n    page = 1\n    next_page_link = \"/page/#{page + 1}\"\n\n    render(\n      conn,\n      \"index.html\",\n      posts: Blog.paginated_posts(page),\n      has_next_page: Blog.has_next_page(page),\n      next_page_link: next_page_link\n    )\n  end\n\n  def paginate(conn, %{\"count\" => count}) do\n    {count, _} = Integer.parse(count)\n    next_page = count + 1\n    previous_page = count - 1\n    next_page_link = next_page == 1 && \"/\" || \"/page/#{next_page}\"\n    previous_page_link = previous_page == 1 && \"/\" || \"/page/#{previous_page}\"\n\n    render(\n      conn,\n      \"paginate.html\",\n      posts: Blog.paginated_posts(count),\n      next_page: count + 1,\n      next_page_link: next_page_link,\n      previous_page_link: previous_page_link,\n    )\n  end\nend\n```\n\nIn the previously referenced `Blog` application context is where the behavior for the pagination functionality will live. The `paginated_posts` function below creates a range of a count up to 9, which will give us 10 items if using a starting point of 0, eg. `0..9`. The function then filters the NimblePublisher `@published_posts` using the index of each post and the `start..stop` range, if a post exists at the index, it will be included in the paginated page.\n\nThe `has_next_page` function takes the current page value and checks to see if there are any more posts in the collection at then next index value.\n\n```elixir\n  def paginated_posts(page) do\n    start = (page * 10) - 10\n    stop = start + 9\n\n    @published_posts\n    |> Enum.with_index\n    |> Enum.filter(fn({_, index}) ->\n      Enum.member?(start..stop, index)\n    end)\n    |> Enum.map(fn(tuple) ->\n      elem(tuple, 0)\n    end)\n  end\n\n  def has_next_page(page) do\n    first_index = (page * 10) - 10\n\n    cond do\n      Enum.at(@published_posts, first_index) -> true\n      true -> false\n    end\n  end\n```\n\nThen in the html template make use of the state delcared in the controllers by rendering the posts using an elixir comprehension and render a link for the next page if relevant.\n\nIndex page:\n```elixir\n  <%= for post <- @posts do %>\n    <div id=\"<%= post.id %>\" style=\"margin-bottom: 1.5rem;\">\n      <div class=\"flex-row-d-column-m\">\n        <h2>\n          <%= link post.title, to: Routes.blog_path(@conn, :show, post), class: \"blog-title\" %>\n        </h2>\n        <time><%= post.date %></time>\n      </div>\n\n      <div class=\"flex-row-no-space\">\n        <img class=\"icon-sm\" src=\"<%= Routes.static_path(DevDecksWeb.Endpoint, \"/images/tag.svg\") %>\" />&nbsp<%= Enum.map(post.tags, fn t -> link(\"#{t}\", to: \"/tags/#{t}\", class: \"blog-tag\") end) %>\n      </div>\n    </div>\n  <% end %>\n  <%= link(\"More Blog\", to: @next_page_link) %>\n```\n\n\nPaginate page:\n```elixir\n <%= for post <- @posts do %>\n    <div id=\"<%= post.id %>\" style=\"margin-bottom: 1.5rem;\">\n      <div class=\"flex-row-d-column-m\">\n        <h2>\n          <%= link post.title, to: Routes.blog_path(@conn, :show, post), class: \"blog-title\" %>\n        </h2>\n        <time><%= post.date %></time>\n      </div>\n\n      <div class=\"flex-row-no-space\">\n        <img class=\"icon-sm\" src=\"<%= Routes.static_path(DevDecksWeb.Endpoint, \"/images/tag.svg\") %>\" />&nbsp<%= Enum.map(post.tags, fn t -> link(\"#{t}\", to: \"/tags/#{t}\", class: \"blog-tag\") end) %>\n      </div>\n    </div>\n  <% end %>\n\n\n  <%= link(\"Less Blog\", to: @previous_page_link) %>\n  &nbsp\n  &nbsp\n  <%= if length(@posts) == 0 do %>\n  <% else %>\n    <%= link(\"More Blog\", to: @next_page_link) %>\n  <% end %>\n```"},{"slug":"2022-install-localstack-python-venv","category":"blog","title":"Installing Localstack in a Python virtual environment","description":"Learn how to instal Localstack in a Python virtual environment","tags":["python","localstack"],"body":"\nThis post assumes you are creating this environment on macOS.\n\nThe first step here is to create the virtual environment directory. The command below will install the virtual environment in the current directories venv folder:\n\n```\npython3 -m venv ./venv\n```\n\nThis will create a number of files for you, if you `cd` into the the venv directory you can list them:\n\n```\n=> cd venv && ls\nbin    include    lib    pyvenv.cfg\n```\n\nTo start the virtual environment execute the `activate` executable located in the bin folder of venv:\n```\n=> source bin/activate\n```\n\nRunning this will pull you into the virtual environment, which you can check by running: \n```\n=> which python\nvenv/bin/python\n```\n\nNow you can install the localstack package from within the virtual environment:\n```\n=> python3 -m pip install localstack\n```\n\nOnce complete check that you have successfully installed localstack by executing the command `localstack` in your terminal.\n\nEnjoy installing / configuring things? Then you may enjoy the post [Steps to configure Git and remote origin](https://www.devdecks.io/2022-configure-git-and-remote).\n"},{"slug":"2022-keyword-argument-must-be-followed-by-space-after","category":"blog","title":"Elixir: keyword argument must be followed by space after:","description":"solve error keyword argument must be followed by space after:","tags":["elixir"],"body":"\nThe other day I received this error when writing an elixir program:\n```\nkeyword argument must be followed by space after: key:\n```\n\nI ran into this Elixir issue trying to pass `key:` as a keyword argument in a tuple. This won’t work because tuple needs to be passed as `:key` inside a tuple (or anywhere that’s not using keywords) otherwise elixir thinks it’s a keyword argument for a map, struct or keyword list.\n\n```\nCache.upsert(pid, {key:, \"fff\"})\n```\n\nIn order to get my program to work I had to update the code to:\n```\nCache.upsert(pid, {:key, \"fff\"})\n```"},{"slug":"2022-list-with-index-in-elixir-example","category":"blog","title":"Iterating a List with_index in Elixir","description":"How to get an index value when iterating list in Elixir","tags":["elixir"],"body":"\nIn Ruby you can get the index value when iterating over a list by calling the method `each_with_index` on the array object itself. This method makes the iterable object and its index available to you inside of a block, like so:\n\n```ruby\narr = [\"one\", \"two\", \"three\"]\narr.each_with_index do |number, index|\n  # handle logic here\nend\n```\n\nThe way to handle this in Elixir is to use the `Enum` module which works with any enumerable data type in the Elixir language, including List. The `Enum` module has a function `.with_index` that can be used to get the index value for each item in the list on iteration. In practice that could look like:\n\n```elixir\n    list = [Post.find(1), Post.find(2)]\n    |> Enum.with_index\n    |> Enum.filter(fn({post, index}) ->\n      # handle logic here\n    end)\n```\n\nHere we are piping the list to the `Enum.with_index/2` and then piping the result of that to the `Enum.filter/2` function. As demonstrated in the code above the iterable object and it's index are available in the callback function of the `filter` function.\n\n\n"},{"slug":"2022-login-to-ngrok-on-the-command-line","category":"blog","title":"How to login to ngrok on the command line","description":"Login to ngrok account on the command line","tags":["ngrok"],"body":"\nThe only time I've found I've had to do this is when logging into an ngrok account for a company and the primary reason I've had to do that is to get access to custom domains the account has created for tunneling through a custom URL. If you're doing this individually you will need to create an ngrok account through their website and follow these same steps below.\n\nTo authenticate your ngrok account this way you will first need login credentials to the ngrok accounts web dashboard. Once logged into the system on the left sidebar navigation should be a link to \"Your auth token\" (or similar depending on how far into the future this is being read). Copy the token from that link and on your command line run `ngrok authtoken your_copied_auth_token`. \n\nFrom now on when you stand up an ngrok tunnel you will be logged into that account and have access to the custom domains and other features created in the account.\n\nFurther reading:\n- [DNS system request flow explained](https://www.devdecks.io/2022-dns-system-request-flow-explained)\n- [How subdomains work with DNS](https://www.devdecks.io/2022-how-do-subdomains-work-with-dns)\n"},{"slug":"2022-merge-nested-lists-elixir","category":"blog","title":"Elixir: merge nested Lists","description":"How to merge nested Lists in elixir","tags":["elixir"],"body":"\nAny time you build an application there will almost inevitably come a time when you need to combine multiple complex data structures into a single data structure. In the event you need to handle such an operation with a List of Lists or “nested Lists”, you can reach for a function on the List module `List.flatten/2`\n \n```\n=> list = [\n  [1, {:ok, \"The Cat Goes to Brazil\"}],\n  [2, {:ok, \"The Dog Barks at the Mailman\"}]\n]\n \n=> List.flatten(list)\n[1, {:ok, \"The Cat Goes to Brazil\"}, 2, {:ok, \"The Dog Barks at the Mailman\"}]\n```\n \nIllustrated above, the two nested Lists are combined into a single List with the elements in the first nested list being accounted for first and the items in the second nested list being accounted for second.\n\nI wrote another List post covering sorting a list of maps [here](https://www.devdecks.io/2022-sort-list-of-maps-by-key), if you indulge I hope you enjoy.\n\n"},{"slug":"2022-migrate-wireguard-through-export","category":"blog","title":"How to migrate wireguard tunnel through export","description":"Learn how to migrate wireguard tunnel through export","tags":["wireguard"],"body":"\nThis Wireguard tunnel migration took place on a Mac and was moved to another Mac. Steps may be slightly different on Windows.\n\nTo start, open the Wireguard application and navigate to the \"Manage Tunnel\" page, while on the manage tunnel page select the tunnel you need to migrate\n\nAfter that navigate to click on \"file\" and then \"export tunnels to zip\". If you get no response from this action, try quitting and restarting Wireguard, this was something that happened to me.\n\nFrom there complete the export and email yourself the zip file.\n\nOn your new computer download the zip file and extract the contents.\n\nIn the new Wireguard app click \"import tunnel(s) from file\" and select the unzipped config.\n\nYou should now be ready to connect to your VPN.\n\nWhile were on the topic of web routing you might find this article, [DNS system request flow explained](https://www.devdecks.io/2022-dns-system-request-flow-explained) interesting."},{"slug":"2022-pg_ctl-vs-psql","category":"blog","title":"Postgres pg_ctl vs psql","description":"Learn the difference between pg_ctl vs psql","tags":["postgres"],"body":"\nThis article is based on my experience using these commands and my general understanding, there undoubtedly is more that can be accomplished with each, so please keep that in mind as you proceed through this wildly fun postgres post.\n\n<h2>pg_ctl</h2>\nAny time I reach for the `pg_ctl` command it is for administrating my postgres server. An example would be starting and stopping the server. The most common commands I've used:\n\nStart postgres server:\n```\npg_ctl start\n```\n\nStop postgres server:\n```\npg_ctl stop\n```\n\nCheck the status of the postgres server:\n```\npg_ctl status\n```\n\nRestart the postgres server:\n```\npg_ctl restart\n```\n\n\n\n<h2>psql</h2>\n\nThe `psql` command is used for accessing a database server. The documentation describes it as \"terminal based front-end to PostgreSQL\". There are different options you can use with this command to specify things like user and hostname. Below we cover some of the different options:\n\nConnect to a database under root access:\n```\npsql database_name\n```\n\nYou can also specify a specific user to connect to the database with:\n```\npsql -d database_name -U user_name -W\n```\n\nOr connect to a server on a different host:\n```\npsql -h host -d database_name -U user_name -W\t\n```\n\nDid this post make your day a little brighter? Why not take a swim in this other postgres article about [postgres with Homebrew](https://www.devdecks.io/2022-start-stop-restart-postgres-redis-homebrew) or learn how to access [table metadata](https://www.devdecks.io/2022-get-column-names-and-types-postgres) if that's more your cup of liquid iv.\n"},{"slug":"2022-pipe-to-function-with-multiple-arguments","category":"blog","title":"Pipe to function with multiple arguments","description":"How to pipe to a function with multiple arguments","tags":["elixir"],"body":"\nIn Elixir it is a common practice to use the pipe operator `|>` to express a series of steps needed to complete an operation. This allows us to define very readable workflows and makes for a cleaner codebase.\n\nWhen using this operator the data from each step will be included automatically as the first argument in the next step. \nIn the event you're only pipeing data to a function with one argument, that would look like this:\n```\npinteresting = %{\n  pumpkin: true,\n  snowfall: false,\n  apple: true,\n  pine_tree: false\n}\n\npinteresting |> Map.keys\n\n=> [:apple, :pine_tree, :pumpkin, :snowfall]\n```\n\nIn the above example `pinteresting` is passed as the first argument to `Map.keys/1` which only takes one argument. But what if we piped the data to a function that accepts multiple arguments? In this scenario it is already implied that the first argument will be the piped data, so when we pass our second argument to the function, it will read like it is the first argument. In the example below `%{coffee: true}` is actually the second argument being passed to `Map.merge/2` and `pinteresting` is the implied first argument:\n```\npinteresting |> Map.merge(%{coffee: true})\n=> %{apple: true, coffee: true, pine_tree: false, pumpkin: true, snowfall: false}\n```\n\n"},{"slug":"2022-postgres-backslash-commands","category":"blog","title":"Postgres backslash commands","description":"List of postgres backslash commands","tags":["postgres"],"body":"\nWhen using PostgreSQL or any SQL database for that matter there are a number of useful commands you can use inside of the PostgreSQL terminal that begin with a backslash and are followed with one or two characters. This post is a non-exhaustive list explaining some of those commands.\n\nList all available databases:\n```\n\\l\n```\n\nQuit from terminal:\n```\n\\q\n```\n\nList all available tables in a database:\n```\n\\dt\n```\n\nRun the previously executed command:\n```\n\\g\n```\n\nList previously executed commands:\n```\n\\s\n```\n\nList of helpful postgres commands:\n```\n\\?\n```\n\nList all of the schemas of a database:\n```\n\\dn\n```\n\nList all functions:\n```\n\\df\n```\n\nList all of the tables views:\n```\n\\dv\n```\n\nLove databases more than your dog loves cheese? You might want to check out [this post](https://www.devdecks.io/2022-pg_ctl-vs-psql) on [pg_ctl vs psql](https://www.devdecks.io/2022-pg_ctl-vs-psql).\n"},{"slug":"2022-postgres-users-owners-privileges","category":"blog","title":"Postgres: users, owners, privileges","description":"learn about postgres users and privileges","tags":["postgres"],"body":"\nIn Postgres and similarly in other SQL databases users of a database have a certain level of access depending on the privileges set for the particular user. The reason you would want to have multiple users in a postgres table is to create different levels of access for each particular user. \n\nTo get a list of all users of a postgres database you will first need to access the database server using [psql](https://www.devdecks.io/2022-pg_ctl-vs-psql) and then you can run the command `\\du`, which will give you a list of users and the roles / privileges.\n\nThe different privileges that exist in postgres include:\nSELECT, INSERT, UPDATE, DELETE, TRUNCATE, REFERENCES, TRIGGER, CREATE, CONNECT, TEMPORARY, EXECUTE, and USAGE.\n\nTo add a role for a user you can use the GRANT keyword:\n```\nGRANT UPDATE ON reports TO ted.lasso;\n```\n\nTo remove a role from a user you can use the REVOKE keyword:\n```\nREVOKE UPDATE ON reports FROM ted.lasso;\n```\n\nAdding all privileges to a user defeats the purpose of creating a new user since the table owner aka Superuser will have the ability to do so. To change the owner of the table, you can use the following command:\n```\nALTER DATABASE dev_decks_dev OWNER TO ted.lasso;\n```\n\nTo create a new user for an existing database in postgres use the CREATE USER command like so:\n```\nCREATE USER new_user;\n```\n\nDo databases make you dancey? Maybe you'd enjoy dancing to the beat of [postgres stored procedures](https://www.devdecks.io/2022-create-and-execute-stored-procedure-postgres){:target=\"_blank:}."},{"slug":"2022-postgres-virtual-table","category":"blog","title":"Postgres: virtual table","description":"learn about virtual tables in postgres","tags":["postgres"],"body":"\nIn Postgres and other SQL databases there is the concept of a virtual table, you will see this arise when referring to another concept in SQL, a [view](https://www.devdecks.io/2022-create-and-execute-db-view-postgres). \n\nThe reason views are referred to as a virtual table is because they actually contain the rows and columns that the view created. So if a view returns a number of columns like first_name, last_name, email, etc. it will exist in basically the same form as an actual database table. \n"},{"slug":"2022-random-date-generator","category":"blog","title":"Rails random date generator","description":"Learn how to generate random dates in Rails","tags":["rails"],"body":"\nTo generate random dates in Rails you can use the DateTime object and a random value to subtract from it. The following code byte will produce a random date in the last 4 weeks:\n\n```ruby\nDateTime.now - (rand * 28)\n```\n\nSo then to generate a random date within the last year you can use:\n\n```ruby\nDateTime.now - (rand * 365)\n```\n\nFurther reading:\n- [Creating a table with non id primary key in Rails](https://www.devdecks.io/2021-creating-a-table-with-different-primary-key-rails)\n- [Migrating behavior from instance based to class based](https://www.devdecks.io/2021-ruby-instance-based-to-classed-based-behavior)\n\n\n"},{"slug":"2022-random-element-from-elixir-list","category":"blog","title":"Get a random element from an Elixir List","description":"example of how to get a random element from a List","tags":["elixir"],"body":"\nIn order to complete this mission we will reach for the `Enum` module which has a function defined in it `random/1`. This function expects its single argument to be the enum passed to it, in this case an elixr `List`. Below is an example usage:\n\n```\niex(1)> list = [\"cat\", \"dog\", \"turtle\"]\n[\"cat\", \"dog\", \"turtle\"]\niex(2)> Enum.random(list)\n\"dog\"\n```"},{"slug":"2022-reading-force-casing-of-project","category":"blog","title":"Force casing of mix/elixir project module","description":"create a project name in all caps in elixir","tags":["elixir","mix"],"body":"\nBy default Elixir will create the new project module passed to the mix generate with the CamelCase format but if you want your project to have specific module casing (like uppercase) you can pass the --module flag to `mix.new`. That looks like this:\n\n```\nmix new dev_decks --module DEVDECKS\n```\n\nThe resulting project module:\n<image src=\"/images/blog/project-name-overrides-elixir.png\" alt=\"name-overrides\" />"},{"slug":"2022-reading-image-text-using-elixir","category":"blog","title":"Reading image text using Elixir","description":"Learn how to read text of an image using Elixirs OCR","tags":["elixir","ocr"],"body":"\nThis post will detail how you can read text off of an image using the Elixir programming language.\n\nTo handle this we will use a technology called Optical Character Recognition which is used to find printed or handwritten text characters inside of an image.\n\nThe steps we will take to complete this project are:\n\n1. Install the system package for tesseract (an OCR engine).\n2. Include the tesseract-ocr-elixir lib in your elixir dependencies.\n3. Test the library functionality using IEx.\n\n<h2> Important note before installation:</h2>\nIf you don't install the tesseract engine before trying to use the Elixir library tesseract-ocr-elixir you will likely be met with this error:\n\n```\niex(1)> TesseractOcr.read(\".lib/testocr.png\")\n\n** (ErlangError) Erlang error: :enoent\n\n    (elixir 1.12.0) lib/system.ex:1041: System.cmd(\"tesseract\", [\".lib/testocr.png\", \"stdout\"], [])\n\n    (tesseract_ocr 0.1.5) lib/tesseract_ocr.ex:19: TesseractOcr.read/2\n```\n\nThis error is letting you know you haven't installed tesseract, not that the file path is empty (which without reading the stacktrace you might suspect because of the :enoent eror).\n\nOnce you install tesseract this error should go away. You can see the system request to tesseract in the screenshot below:\n\nreplace_image_0_x\n\n<br />\n<h2>1. Installing Tesseract</h2>\n\nI use Homebrew to install system dependencies on my mac. So for me installing this library was straightforward:\n\n```\nbrew install tesseract\n```\n\nThe [tesseract website](https://tesseract-ocr.github.io/tessdoc/Installation.html) has more options for installation.\n\n<h2>2. Add tesseract-ocr-elixir lib to deps</h2>\n\nIn your mix application add the library tesseract-ocr-elixir to deps. This is an Elixir wrapper for OCR.\n\n```\ndef deps do\n  [\n    {:tesseract_ocr, \"~> 0.1.5\"}\n  ]\nend\n```\n\nRun `mix deps.get` to install the package.\n\n<h2>3. Test the library functionality</h2>\n\nTo do a quick test of the library you will need an image with text, so grab your favorite meme and then load your application using `iex -S mix`.\n\nNow you can test the library by the `read` function which will print out any words OCR finds:\n\n```\niex> TesseractOcr.read(\"test/resources/testocr.png\")\n\"OH YOU FOUND SOME INTERNET MEMES YOU MUST BE FUNNY\"\n```\n\nThat was the last step! You can also use the library to read PDFs and do other fun things.\n\n\n"},{"slug":"2022-reading-pdf-text-using-elixir","category":"blog","title":"Reading pdf text using Elixir","description":"Learn how to read text of an pdf using Elixirs OCR","tags":["elixir","ocr"],"body":"\nLet's say you want a use to be able to upload a PDF and then your system needs to understand what the text was in the PDF they uploaded, good news is there's an Elixir solution for that! It's OCR or Optical Character Recognition which is used to find printed or handwritten text characters inside of an [image](https://www.devdecks.io/2022-reading-image-text-using-elixir).\n\nTo quickly test how this works in Elixir we will take three steps:\n1. Install the binaries for tesseract (an OCR engine).\n2. Include the tesseract-ocr-elixir lib in your dependencies.\n3. Test the packages functionality using IEx.\n\n<h2>1. Installing Tesseract</h2>\n\nIf you're using a Mac you can install tesseract using Homebrew:\n\n```\nbrew install tesseract\n```\n\nIf not the [tesseract website](https://tesseract-ocr.github.io/tessdoc/Installation.html) has more options for installation.\n\n<h2>2. Add the tesseract-ocr-elixir lib to dependencies</h2>\n\nIn your application add the library tesseract-ocr-elixir to deps. This is an Elixir wrapper for OCR.\n\n```\ndef deps do\n  [\n    {:tesseract_ocr, \"~> 0.1.5\"}\n  ]\nend\n```\n\nTo install the new dependency run `mix deps.get`.\n\n<h2>3. Test the library functionality</h2>\n\nTo do a quick test run your application using `iex -S mix` or if you're using Phoenix `iex -S mix phx.server`.\n\nNow you can test the library by the `read` function which will print out any words OCR finds:\n\n```\niex> TesseractOcr.read(\"test/resources/testocr.pdf\")\n\"test pdf content\"\n```\n\n\n"},{"slug":"2022-remove-element-from-tuple-at-an-index","category":"blog","title":"How to remove an element from a tuple","description":"How to remove an element from a tuple in elixir","tags":["elixir"],"body":"\nIn a [previous example](https://www.devdecks.io/2022-add-element-to-tuple-at-an-index) we worked to add an element to a tuple at an index position. In this post we will handle the case of needing to remove that same element. \n\nFirst lets define the tuple. In the tuple below there is an item that doesn't match the string format of the rest of the elements, we'll remove that one.\n```\nfive_elem_tuple = {\"one\", \"one.five\", \"two\", \"three\", \"four\"}\n```\n\nTo handle the delete mechanism we will utilize the `Tuple.delete_at/2` function. This function accepts a tuple and an index position as arguments and returns a new tuple.\n```\nfive_elem_tuple = {\"one\", \"one.five\", \"two\", \"three\", \"four\"}\nfive_elem_tuple |> Tuple.delete_at(1)\n=> {\"one\", \"two\", \"three\", \"four\"}\n```\n\n"},{"slug":"2022-remove-multiple-key-value-pairs-from-map","category":"blog","title":"Elixir: remove multiple k/v pairs from a map","description":"How to remove multiple key value pairs from an elixir map","tags":["elixir"],"body":"\nIf you need to delete multiple entries in a map when using Elixir you can look at the `Map` module. On the `Map` module exists a function `drop/2`. The two arguments it takes are:\n1. A map to delete the entry from\n2. A list of keys to remove from the map\n \nIn practice that looks like this:\n```\niex(7)> map = %{k1: :v1, k2: :v2, k3: :v3}\n%{k1: :v1, k2: :v2, k3: :v3}\niex(8)> Map.drop(map, [:k2, :k1])\n%{k3: :v3}\n```\n\nIn the event you need to remove a single k/v pair there is a `delete` function on the `Map` module that can be utilized. I review that [here](https://www.devdecks.io/2022-remove-multiple-key-value-pairs-from-map)."},{"slug":"2022-remove-single-key-value-pair-from-map","category":"blog","title":"Elixir: remove a single k/v pair from a map","description":"How to remove a single key value pair from an elixir map","tags":["elixir"],"body":"\nWhen you need to delete a map entry in Elixir you can reach for the `Map` module. There is a function defined on the `Map` module called `delete/2`. The two arguments it takes are:\n\n1. A map to delete the entry from\n2. A key to remove from the map\n\nIn practice that looks like this:\n```\niex(3)> map = %{k1: :v1, k2: :v2}\n%{k1: :v1, k2: :v2}\niex(4)> Map.delete(map, :k2)\n%{k1: :v1}\n```\n\nNow if you need to remove multiple k/v pairs there is a `drop` function on the `Map` module that can be utilized. I review that [here](https://www.devdecks.io/2022-remove-single-key-value-pair-from-map).\n\n"},{"slug":"2022-rendering-a-collection-of-turbo-frames","category":"blog","title":"How to render a collection of turbo frames","description":"How to render a collection of turbo frames","tags":["rails","turbo"],"body":"\nThis is a code example of how to render a collection of Turbo Frames for inline editing within each frame. This is going to be a continuation from a previous post on [redering Turbo Frames within a form](https://www.devdecks.io/2022-rendering-a-turbo-frame-inside-a-form){:taget=\"_blank\"}. \n\nTurbo Frames work by first rendering the html content within the frame and then if you click an internal link within a turbo frame it will make a network request to get new html that will replace the current contents of the frame. For this to happen a Turbo Frame with the same Turbo Frame ID needs to exist on both sides of the frame, later in this example that will see that as `name_frame_id`.\n\nTo handle this we will need to add an index action to the `OrdersController` that retrieves the orders collection from the database and an `edit_from_step` action to get the html contents of the other side of the Turbo Frame.\n\norders_controller.rb\n```ruby\nclass OrdersController < ApplicationController\n  def index\n    @orders = Order.all\n  end\n\n  def edit_from_step\n    @order = @order\n    @step = params[:step_id]\n\n    render :edit\n  end\nend\n```\n\nAnd then in the html template we will iterate over the list of orders and render a Turbo Frame partial for each order. In the partial there is a link to the `edit_from_step` path, which when clicked will execute an async request to get the html returned from that request and replace our current from contents with the new frame contents. So in this example the contents of the frame in `_order.html.erb` will be replaced with matching turbo frame contents of `_step_(step_id).html.erb`. \n\nIn this example the html at `_step_(step_id).html.erb` contains a form within the frame to edit the contents previously displayed by the frame before clicking the link, which can be used for inline editing.\n\nindex.html.erb\n```ruby\n<div id=\"orders\">\n  <% @orders.each_with_index do |order, index| %>\n    <%= render partial: \"order\", locals: { index: index, order: order }  %>\n  <% end %>\n</div>\n```\n\n_order.html.erb\n```ruby\n<% name_frame_id = dom_id(order, \"name\") %>\n<%= turbo_frame_tag name_frame_id, data: { turbo_frame: name_frame_id } do %>\n  <h3>NAME</h3>\n  <div><%= order.name %></div>\n  <%= link_to \"Edit Name\", edit_from_step_path(order, 1) %>\n  <br/>\n<% end %>\n\n<% toppings_frame_id = dom_id(order, \"toppings\") %>\n<%= turbo_frame_tag toppings_frame_id, data: { turbo_frame: toppings_frame_id } do %>\n  <h3>TOPPINGS</h3>\n  <% order.toppings.each do |topping| %>\n    <p><%= topping %></p>\n  <% end %>\n  <%= link_to \"Edit Toppings\", edit_from_step_path(order, 2) %>\n  <br />\n<% end %>\n```\n\nedit.html.erb\n```ruby\n<%= render partial: \"orders/separate_form_partials/_step_#{@step ? @step : order.step}\", locals: { order: @order } %>\n```\n\norders/separate_form_partials/_step_1.html.erb\n```ruby\n<h1>Name</h1>\n<% name_frame_id = dom_id(order, \"name\") %>\n<%= turbo_frame_tag name_frame_id, data: { turbo_frame: name_frame_id } do %>\n  <%= form_with(model: order) do |form| %>\n    <% if order.errors.any? %>\n      <div style=\"color: red\">\n        <h2><%= pluralize(order.errors.count, \"error\") %> prohibited this order from being saved:</h2>\n\n        <ul>\n          <% order.errors.each do |error| %>\n            <li><%= error.full_message %></li>\n          <% end %>\n        </ul>\n      </div>\n    <% end %>\n\n    <%= form.text_field :name %>\n    <%= form.submit \"Continue Order\" %>\n  <% end %>\n<% end %>\n```\n\nFurther reading:\n- [Handling system authentication in software engineering](https://www.devdecks.io/2022-system-auth-in-software-engineering)\n- [How to read Ruby open source code locally](https://www.devdecks.io/2022-how-to-read-ruby-open-source-code-locally)\n\n\n"},{"slug":"2022-rendering-a-turbo-frame-inside-a-form","category":"blog","title":"How to render turbo frames within a multi-part form","description":"How to render turbo frames within a multi-part form","tags":["rails","turbo"],"body":"\nThis is a code example of how to render a Turbo Frame within an html form. This is going to be an application that handles orders. You will need to generate an application and create the orders controller and order model. This was the command I used to generate this application, it uses esbuild for javascript and tailwind for the css. This is an example application I built to get exposure to Turbo.\n\n```ruby\nrails new kitchen -j esbuild --css tailwind\n```\n\nThe application functionality this examples is a multi-part form, which will show a new turbo frame for each step of the order the user has progressed to.\n\nThis is what my migration change method looked like for the orders model:\n```ruby\ndef change\n  create_table :orders do |t|\n    t.string :name\n    t.json :toppings, array: true, default: []\n    t.integer :step, default: 1\n\n    t.timestamps\n  end\nend\n```\n\nThen add a standard rails route and controller action to handle the incoming request that will render the html with the turbo frame(s).\n\nroutes.rb\n```ruby\nRails.application.routes.draw do\n  resources :orders\nend\n```\n\nOne thing to call out in the controller is on every update we redirect to the edit route so that the user can continue to fill out the multi-part form, until they hit the end of the steps in the form.\n\norders_controller.rb\n```ruby\nclass OrdersController < ApplicationController\n  before_action :set_order, only: %i[ edit ]\n\n  def edit\n  end\n\n  def update\n    order = @order.update(order_params)\n\n    if @order.step == 2\n      return head :ok\n    end\n\n    respond_to do |format|\n      if order\n        format.html { redirect_to edit_order_path(@order), notice: \"Order was successfully updated.\" }\n        format.json { render :show, status: :ok, location: @order }\n      else\n        format.html { render :edit, status: :unprocessable_entity }\n        format.json { render json: @order.errors, status: :unprocessable_entity }\n      end\n    end\n  end\n\n  def set_order\n      @order = Order.find(params[:id])\n  end\nend\n```\n\nBelow is the orders model, which contains some hard coded data we will use in our template to render html options for checkboxes. Remember this is an example application, the data for TOPPINGS and EXTRAS should really be stored in a database.\n\nThis model also contains a callback to increment each step on update. The `order#step` will be used to dyamically render the correct partial for the mutlti-step form.\n\norder.rb\n```ruby\nclass Order < ApplicationRecord\n  TOPPINGS = [\"perpperoni\", \"sausage\", \"red onion\", \"banana peppers\", \"anchovies\"]\n  EXTRAS = [\"extra cheese\", \"brownie\", \"breadsticks\"]\n\n  before_update :increment_step\n\n  private\n\n  def increment_step\n    return if step == 2\n\n    self.step = step + 1\n  end\nend\n```\n\nThen in the edit template render the form partial for order while passing in a local order variable:\n\n```ruby\n<%= render partial: \"form\", locals: { order: @order } %>\n```\n\nThis is the standard scaffolded form for the orders views, but within it there is rendered, step. Based off of the step of the process the order is in, we will render a differ turbo frame within the form.\n\n```ruby\n<%= form_with(model: order) do |form| %>\n  <% if order.errors.any? %>\n    <div style=\"color: red\">\n      <h2><%= pluralize(order.errors.count, \"error\") %> prohibited this order from being saved:</h2>\n\n      <ul>\n        <% order.errors.each do |error| %>\n          <li><%= error.full_message %></li>\n        <% end %>\n      </ul>\n    </div>\n  <% end %>\n\n  <%= render partial: \"orders/steps/step_#{@step ? @step : order.step}\", locals: { order: order, form: form } %>\n<% end %>\n```\n\nWhat follows are examples of two the step partials. In each of the individual partials we do a few things:\n1. Create a turbo frame using the `turbo_frame_tag` method.\n2. Create a unique id for the tag using the `dom_id` method and passing it arguments of `order` and the attribute on the order this specific tag is associate with, `\"name\"`. Pass the resulting value as the first argument to `turbo_frame_tag`. \n3. The html input for the part of the order the frame is associated with and a submit button (this could also be a partial).\n\nIt will be used by rails to make sure it is both grabbing the correct html on the other side of the turbo frame and then again use it to populate the html reponse within the correct frame.\n\n/views/orders/partials/steps/step_1.rb\n\nStep 1\n```ruby\n<h1>Name</h1>\n<% name_frame_id = dom_id(order, \"name\") %>\n<%= turbo_frame_tag name_frame_id, data: { turbo_frame: name_frame_id } do %>\n  <%= form.text_field :name %>\n  <%= form.submit \"Continue Order\" %>\n<% end %>\n```\n\n/views/orders/partials/steps/step_2.rb\n\nStep 2\n```ruby\n<h1>Toppings</h1>\n<% toppings_frame_id = dom_id(order, \"toppings\") %>\n<%= turbo_frame_tag toppings_frame_id, data: { turbo_frame: toppings_frame_id } do %>\n  <% Order::TOPPINGS.each do |topping| %>\n    <br />\n    <%= form.check_box :toppings, {multiple: true}, topping, false %>\n    <%= form.label topping %>\n  <% end %>\n  <%= form.submit \"Continue Order\" %>\n<% end %>\n```\n\nNow when you submit each form it will hit the update action in the controller async using Turbo Drive and redirect you to the edit path as long as the order still has steps to complete (in this example we stop the steps at 2). \n\nFurther reading:\n- [How to iterate a string containing newlines in Ruby](https://www.devdecks.io/2022-how-to-iterate-string-with-newlines-in-ruby)\n- [How to replace the contents of a string in Ruby](https://www.devdecks.io/2022-how-to-replace-string-content-in-ruby)\n"},{"slug":"2022-rendering-liveview-template-outside-of-router","category":"blog","title":"Rendering a LiveView template outside of router","description":"How to conditionally render a LiveView template outside of application router","tags":["liveview","elixir"],"body":"\nThis post assumes you have already developed your LiveView code and need a way to render the markup from your template in a different view. In this example that functionality ended up being for a modal that I wanted to render on different pages. \n\nIn your applications Web module, in my case `DevDecksWeb` you need to include an import for LiveView helpers, to get access to the function we will need, `live_render`:\n```\nimport Phoenix.LiveView.Helpers\n```\n\nIf you're using the Phoenix application development framework this will be imported when you generate your application.\n\nOnce this is imported you can call `live_render` in your template like so and pass it the `@socket` and your LiveView module `DevDecksWeb.EmailModalLive`:\n\n```\n<%= live_render(@socket, DevDecksWeb.EmailModalLive) %>\n```\n\nAnd if you need to conditionally render the template based off of some state you can do so with a single line conditional:\n```\n<%= if @show_modal do live_render(@socket, DevDecksWeb.EmailModalLive) end %>\n```\n"},{"slug":"2022-role-vs-user-vs-priviledge-postgres","category":"blog","title":"Postgres: role vs user vs privilege","description":"learn about roles, users, and privileges in postgres","tags":["postgres"],"body":"\nIn relational databases like postgres you will see the term “role” mentioned frequently and you might think “that sounds an awful lot like what I know to be a user”. That’s because in SQL a role acts exactly how a user of a web application would act. One notable difference is that a role can apply to either a single user or a group of users, depending on the context it is used. Roles have certain access rights, just like a user within a web application would have certain access rights. To learn more about altering a roles access level, check out [this post](https://www.devdecks.io/2022-create-and-execute-stored-procedure-postgres) on the topic.\n\nIn a database system like postgres a role is considered an entity that has ownership rights of certain database objects, such as a table or database itself. Privileges are access rights given to a particular role. You can query for a given roles privileges by using the `\\du` command inside of postgres which will display a table of roles and their associated privileges.\n\n\n"},{"slug":"2022-ruby-0..-2-explained","category":"blog","title":"Ruby [0..-2] explained","description":"Ruby [0..-2] range in an array explained","tags":["ruby"],"body":"\nWhen programming in Ruby you will sometimes see this code being run against an array or string [0..-1] or [0..-2], this is saying give me all the characters or the string or elements of the array that exist in this range. In ruby a negative index in a range means X from last with -1 one referencing the last item in the array or string.\n\nThis is best illustrated through a few examples. In the one below we use the negative integer to get the last item from a string and array and then we do the same thing but to get the second to last element from a string or array:\n\n```ruby\n\"string\"[-1]\n=> \"g\"\n\n\"string\"[-2]\n=> \"n\"\n``` \n\nSo then if we pass a range to a string or array we are saying \"give me everything in this range returned as a new array or string\". So if the range is 0..-1 that means give me the first element through the last (the entire element) and if we use 0..-2 it means give me the first element up to the second to last. Below are the examples in code:\n\n```\n\"string\"[0..-1]\n=> \"string\"\n\n\"string\"[0..-2]\n=> \"strin\"\n``` \n"},{"slug":"2022-ruby-hash-string-keys-to-symbol","category":"blog","title":"Convert ruby hash with string keys to symbol keys","description":"How to convert ruby hash with string keys to symbol keys","tags":["ruby"],"body":"\nIf you have a ruby hash with string / arrow keys like so:\n\n```ruby\n{\n  \"key1\" => \"val1\",\n  \"key2\" => \"val2\"\n}\n```\n\nBut you want the hash to have symbol keys, you can use the `transform_keys` method:\n\n```ruby\n{\n  \"key1\" => \"val1\",\n  \"key2\" => \"val2\"\n}.transform_keys(&:to_sym)\n\n=> {:key1=>\"val1\", :key2=>\"val2\"}\n```\n\n\nFurther reading:\n- [Rails error handling cheatsheet](https://www.devdecks.io/2021-rails-handling-errors)\n- [An example of when to expire a cache key](https://www.devdecks.io/2021-example-of-when-to-expire-cache-key)\n\n\n"},{"slug":"2022-ruby-keep_if-and-delete_if copy","category":"blog","title":"Ruby keep_if and delete_if methods","description":"Remove item from array if condition is met, ruby","tags":["ruby"],"body":"\nIn the situation where you need to remove an item from a collection based on a condition, you can use the `Array#delete_if` or `Hash#delete_if` methods.\n\n```ruby\nhash = {title: \"Awesome Possum\", count: 43}\nhash.delete_if {|key, value| key == :count }\n=> {:title=>\"Awesome Possum\"}\n\narray = [2, 3 ,4, 6, 7]\narray.delete_if {|int| int.even? }\n=> [3, 7]\n```\n\nAnother situation you are likely to encounter on your journey as a Ruby Programmer is the need to only keep items in a collection if a condition is met. For this you can use the `Array#keep_if` or `Hash##keep_if` methods.\n\n```ruby\nhash = {title: \"Awesome Possum\", count: 43}\nhash.keep_if {|key, value| key == :count }\n=> {:count=>43}\n\narray = [2, 3 ,4, 6, 7]\narray.keep_if {|int| int.even? }\n=> [2, 4, 6]\n```\n\n...\n\nSince you seem like keeping things, why not keep on reading with this ruby post on [\nHow to add a guard to a block in Ruby](https://www.devdecks.io/2022-adding-a-guard-to-a-block)?\n\n"},{"slug":"2022-running-two-git-branches-locally","category":"blog","title":"How to run two different git branches locally","description":"How to run two different git branches locally","tags":["git"],"body":"\nTo handle this you will need to use a git worktree. This will create a new directory in your local system that has the same git tracking information.\n\nTo accomplish this execute `git worktree add` and pass it the name of the directory and branch name (in that order). \n\n```\ngit worktree add ../new-directory branch-name\n```\n\nLater when you need to remove that worktree you can use the command `git worktree prune` from your original directory (not the newly created directory) which will remove the worktree, or you can use `git worktree remove path-to-worktree`.\n\nFurther reading:\n- [Handling system authentication in software engineering](https://www.devdecks.io/2022-system-auth-in-software-engineering)\n- [How to read Ruby open source code locally](https://www.devdecks.io/2022-how-to-read-ruby-open-source-code-locally)\n\n\n"},{"slug":"2022-set-a-primary-key-ecto","category":"blog","title":"How to set a DB primary key using Ecto","description":"set a DB primary key using Ecto","tags":["elixir","ecto"],"body":"\nWhen you use Ecto to manage your database(s) by default it will assume you want to use a primary key of `:id` for each of the tables you create.\nSometimes you will want to use a different primary key. Maybe you want to use a :uuid scheme instead. Whichever the reason, you can override this behavior by passing a keyword option of `primary_key: true` to your migration file. Example:\n\n```\nfield :store_uuid, :uuid, primary_key: true \n```\n\nI also wrote another post on DB [primary keys in Rails](https://www.devdecks.io/2021-creating-a-table-with-different-primary-key-rails) if it helps clear things up you're still uncertain about.\n"},{"slug":"2022-set-default-state-elixir-genserver","category":"blog","title":"How to set default state for a GenServer","description":"Learn how to set default state for a GenServer","tags":["elixir"],"body":"\nWhen you write a GenServer you will in almost every use case run it as a supervised process to get the added benefit Supervisors provide, fault tolerance.\n\n\n\nTo set the initial state for your supervised GenServer process you will need to make sure you have a `start_link` function defined in your GenServer that makes another call to the GenServer `init` callback. That is outlined below with function comments for additional context:\n\n\n\nlib/server.ex\n```\ndefmodule CacheServer.Server do\n  use GenServer\n  GenServer is passed as a child to\n\n  def start_link(initial_state) do\n    GenServer.start_link(__MODULE__, initial_state, name: Cache)\n  end\n\n  @impl true\n  def init(cache_store) do\n    {:ok, cache_store}\n  end\nend\n```\n\nNow that you’ve seen the functions that need to be defined in order to start your process. Navigate to your `application.ex` file. In the `children` list is where you will start all your genservers for your application. There are a couple of different ways you can format the tuple in the `children` list but below we optioned to pass the GenServer name and the initial state, in this case `%{a: :b}`. This will be passed to the `start_link` function we referenced above.\n\n\nlib/application.ex\n```\ndefmodule CacheServer.Application do\n  @moduledoc false\n  use Application\n\n  @impl true\n  def start(_type, _args) do\n    children = [\n      start_link(arg)\n      {CacheServer.Server, %{a: :b}}\n    ]\n\n    opts = [strategy: :one_for_one, name: CacheServer.Supervisor]\n    Supervisor.start_link(children, opts)\n  end\nend\n```"},{"slug":"2022-setting-asdf-package-versions","category":"blog","title":"Setting asdf package versions","description":"How to set asdf package versions","tags":["asdf"],"body":"\nThere a few different options you have when setting a package version in ASDF.\n\n1. You can set a version locally using a .tool-versions file\n2. You can set a version globally using a .tool-versions file\n3. You can set a version locally using an asdf command \n4. You can set a version globally using an asdf command \n\nIf you want to specify a local package version using a .tool-versions file, you will need to create the file at the root of your project directory and then list the packages you want to use for that project in the file.\n\n```\ntouch .tool-versions\n```\n\nAnd then in the file add packages, ex:\n\n```\nnodejs 14.11.0\nruby 2.7.1\n```\n\nIf you want to specify default packages for your computer you can create at your .tool-versions file at the user root directory and specify packages there. These packages will be overridden in any project specific (local) .tool-versions file.\n\nYou can also set package versions through the command line using the commands:\n```\nasdf local package_name version\nasdf global package_name version\n```"},{"slug":"2022-sort-list-of-maps-by-key","category":"blog","title":"Sort a list of maps by key value","description":"sort elixir list of maps based on property","tags":["elixir"],"body":"\nSuppose you have a list of maps that you need to sort by a specific key in each of the maps, you can do so using elixir’s Enum module, `Enum.sort_by/3`. \n\nThis function requires an enum and callback function and optionally accepts a third sorter argument, like `:asc` and `:desc`. The sorter will use :asc by default.\n\nThe callback function passed to the argument needs to return the value that is being sorted on and `sort_by` will do the rest.\n\nTo sort by one key in ascending order:\n```\nl = [%{payment: 34, tip: 5}, %{payment: 21, tip: 6}, %{payment: 10, tip: 5}]\n\nEnum.sort_by(l, fn(li) -> li.payment end)\n=> [%{payment: 10, tip: 5}, %{payment: 21, tip: 6}, %{payment: 34, tip: 5}]\n```\n\nTo sort by one key in descending order:\n```\nl = [%{payment: 34, tip: 5}, %{payment: 34, tip: 4}, %{payment: 21, tip: 7}, %{payment: 21, tip: 6}, %{payment: 10, tip: 5}]\n\nEnum.sort_by(l, fn(li) -> li.payment end, :desc)\n=> [%{payment: 34, tip: 5}, %{payment: 21, tip: 6}, %{payment: 10, tip: 5}]\n```\n\nTo sort by multiple keys, return a tuple from the callback function:\n```\nl = [\n  %{payment: 34, tip: 5},\n  %{payment: 34, tip: 4},\n  %{payment: 21, tip: 7},\n  %{payment: 21, tip: 6},\n  %{payment: 10, tip: 5}\n]\n\nEnum.sort_by(l, fn(li) -> {li.payment, li.tip } end)\n=> [\n  %{payment: 10, tip: 5},\n  %{payment: 21, tip: 6},\n  %{payment: 21, tip: 7},\n  %{payment: 34, tip: 4},\n  %{payment: 34, tip: 5}\n]\n```\n\nIf you enjoyed this elixir post you might also enjoy [Reading pdf text using Elixir](http://www.devdecks.io/2022-reading-pdf-text-using-elixir)"},{"slug":"2022-sql-inner-join-not-returning-records","category":"blog","title":"SQL inner join not returning records","description":"SQL inner join not returning records","tags":["sql"],"body":"\nAn inner join query is not returning any records for a table but you know there are records for the query in at least one of the tables and you want those records with null values being used for columns without data.\n\nIn this scenario you need to use an outer join, either a left outer join or a right outer join. It will accomplish exactly that, it will get all the data from the table running the join and it will provide null values for all of the columns that don't have data on the table being joined.\n\n\nFurther reading:\n- [Retroactively add timestamps to a Phoenix/Ecto project](https://www.devdecks.io/2021-retroactively-add-timestamps-in-phoenix-ecto)\n- [Add a sitemap to a Phoenix project](https://www.devdecks.io/2020-add-sitemap-to-phoenix-elixir-project)\n\n\n"},{"slug":"2022-sql-timeout-ordering","category":"blog","title":"SQL timeout from ordering","description":"Solve SQL timeout from ordering issue","tags":["sql"],"body":"\nThis example is in reference to the following technical problem:\n\nAn http request to your app requires querying the database and returning those records as JSON. I will be speaking to this issue with that reference in mind.\n\nIf you're querying for a set of records, say 1000 records in a single table and need to order them differently than asc/desc on ID or created_at, then you may encounter a gateway timeout in the query with a table with many records.\n\nFor example if you wanted to order a set of records on updated_at, and there are millions of rows in the table, then sql might need to look through millions of records for each time it places a next record in order. This can take a long time.\n\nTo help solve this issue it is best to add an index to the table on the column being queried.\n\nBe wary of any additional querying / app processing occurring after your query is returned because if it's a long running query then any additional processing time can also lead to your http connection timing out.\n\nFurther reading:\n- [Retroactively add timestamps to a Phoenix/Ecto project](https://www.devdecks.io/2021-retroactively-add-timestamps-in-phoenix-ecto)\n- [Add a sitemap to a Phoenix project](https://www.devdecks.io/2020-add-sitemap-to-phoenix-elixir-project)\n\n\n"},{"slug":"2022-start-stop-restart-postgres-redis-homebrew","category":"blog","title":"How to start, stop, and restart Redis or Postgres using Homebrew","description":"Learn how to start, stop, and restart Redis or Postgres using Homebrew","tags":["homebrew","postgres","redis"],"body":"\nIn the past I've had to look this up a couple of times and it took me longer than I would have liked to find the answer, so I hope this post can cut down on that time for you now and future me.\n\nAfter you’ve installed Homebrew you will have access to a `brew services` command for relevant packages. This command is for background services like in this case, database applications. \n\nTo start either of the titled services you can use the following commands:\n\nStart Postgres or Redis:\n```\nbrew services start redis\n\nbrew services start postgresql\n```\n\nIf you need to restart these services for any reason you can do so using these commands:\n\nRestart Postgres or Redis:\n```\nbrew services restart redis\n\nbrew services restart postgresql\n```\n\nAnd may you need to stop any of these background processes you can through these commands:\n\nStop Postgres or Redis:\n```\nbrew services kill redis\n\nbrew services kill postgresql\n```\n\nIf you're looking for more Postgres configuration fun, I've got the article of your desires: [How to use a ConfigMap file for postgres environment variables in Kubernetes](https://www.devdecks.io/2021-how-to-use-a-configmap-file-for-postgres-url-kubernetes).\n\n"},{"slug":"2022-system-auth-in-software-engineering","category":"blog","title":"Handling system authentication in software engineering","description":"different types of system authentication in software engineering","tags":["auth"],"body":"\nIn this post I hope to shed some light on authentication in software engineering. This post is starting out as a system to system authentication post, but I may revisit this to add end user authentication notes as well.\n\n<h2>System to system authentication:</h2>\nAny time you're trying to understand an authentication mechanism, it is fundamental to identify which interactions need to take place and on behalf of who. In the case of system to system auth I like to think of this as either \"a system acting on behalf of itself\" or \"a system acting on behalf of its client\". An example of the second type might be a SAAS system that has multiple organizations and the system is sending a request on behalf of that organization, usually as part of an integration.\n\n<h2>System acting on behalf of itself</h2>\nYou can think of this type of authentication as the root of authentication. This level won't give you access to individual client information, but rather let you do things like set configuration data for an integration that will be relevant to *all* clients. In this scenario the system we are communicating with only needs to know that we are the application we say we are.\n\nThese credentials are usually stored as environment variables within your application. Possibly as a token or a username/password combination:\n\n```\nENV[\"INTEGRATION_PARTNER_1_TOKEN\"]\n\nENV[\"INTEGRATION_PARTNER_2_USERNAME\"]\nENV[\"INTEGRATION_PARTNER_2_PASSWORD\"]\n```\n\n<h2>System acting on behalf of a client</h2>\nLet's say we create an integration with another company's system and now have multiple clients utilizing that system, we need to know how to identify which clients to send data back to or retrieve data from. There are a few different ways of handling this but one might be to store a config option for each client called `partner_username` and `partner_password` as columns in your database. These would be values you obtain from the client prior to kicking off the integration and can either be used to directly authenticate the client, or in exchange for a short lived token that you would then use when making requests. \n\nLikewise if a system needs to authenticate against your application for a specific client you will need a way to store and validate that data, `partner_incoming_username` and `partner_incoming_password` could be additional columns in your database to handle this information.\n\nIt should be noted that you won't always need both a `username` and `password` for this, sometimes you will only be provided one or the other.\n\n\nFurther reading:\n- [Ruby on Rails integration testing cheatsheet](https://www.devdecks.io/2022-rails-integration-testing-cheatsheet)\n- [How to generate uuids in a Ruby on Rails application](https://www.devdecks.io/2022-generating-uuids-in-rails)"},{"slug":"2022-trim-spaces-vscode","category":"blog","title":"Trim trailing spaces using VScode","description":"setup vscode to trim spaces","tags":["vscode"],"body":"\nTo achieve this desired outcome, first install the trailing spaces extension.\n\nAfter that is installed, open VScode commands (mac shortcut I use is cmd+shift+p) and navigate to Preferences: Open User Settings. When you select this a settings.json file will be displayed.\n\nAdd this to the object:\n```\n\"trailing-spaces.trimOnSave\": true\n```\n\nOr if this is your first update to the file create the whole object:\n```\n{\"trailing-spaces.trimOnSave\": true}\n```\n\nNow all that's left to do is give it a try. \n"},{"slug":"2022-two-colons-before-a-class-name-ruby","category":"blog","title":"Two colons before a class name in ruby","description":"Two colons before a class name ruby","tags":["ruby"],"body":"\nWhen you see two colons before a constant reference in Ruby, like `::User` that code is saying “look for this constant” defined without any namespace or nesting.\n\nIt will not look up Admin::User even if you make a reference to `::User` from within the admin namespace.\n\nFurther reading:\n- [How to render a collection of turbo frames](https://www.devdecks.io/2022-rendering-a-collection-of-turbo-frames)\n- [How to render turbo frames within a multi-part form](https://www.devdecks.io/2022-rendering-a-turbo-frame-inside-a-form)\n\n\n"},{"slug":"2022-update-keyboard-shortcuts-vscode","category":"blog","title":"How to update keyboard shortcuts in VScode","description":"update vscode shortcuts","tags":["vscode"],"body":"\nIf you need to update your shortcuts in VScode first open the command palette, on a mac you can do this through `cmd+shift+p`. This is not to be confused with your [user settings](https://www.devdecks.io/2022-trim-spaces-vscode){:target=\"_blank} file.\n\nNext type \"Open Keyboard Shortcuts\" and select it. This will open a JSON configuration file that you can paste your shortcuts in. Each configuration object has at two keys \"key\" and \"command\" which are fairly self explanatory and here is an example for reference:\n\n```\n[\n  {\n    \"key\": \"alt+x\",\n    \"command\": \"editor.action.selectToBracket\"\n  },\n  {\n    \"key\": \"cmd+k\",\n    \"command\": \"workbench.files.action.collapseExplorerFolders\"\n  }\n]\n```\n"},{"slug":"2022-update-npm-asdf","category":"blog","title":"Update NPM when using ASDF","description":"How to update npm is you're using asdf","tags":["npm","asdf"],"body":"\nTo be able to updated NPM first make sure node is installed and added to your tool-versions or set a local / global version of nodejs.\n\nYou can set a version locally using:\n```\nasdf local package version\n```\n\nOr globally through:\n```\nasdf global package version\n```\n\nYou can validate that npm and nodes are being run by asdf by running the command:\n```\nwhich npm\n```\n\nAnd that will print the working directory of the executable, which should have asdf in the path if you’re using npm through asdf. Something like:\n```\n/Users/user/.asdf/shims/npm\n```\n\nIf you have nodejs installed through asdf and a version set, you can then install a different version of npm with the `npm install` command:\n```\nnpm install -g npm@8.3.0\n```\n\nAfter that completes you will want to reshim:\n```\nasdf reshim\n```\n\nNo you should be ready to work.\n"},{"slug":"2022-update-what-ecto-considers-empty","category":"blog","title":"Update what Ecto considers nil / empty","description":"use changesets to update empty values","tags":["elixir","ecto"],"body":"\nThe Ecto library ships with a Changeset module to assist with make changes to our database safely. Out of the box the `cast/4` will consider blank strings and `nil` to be empty values. You can add to the list of values the changeset will consider empty using the `empty_values:` option. In practice that looks like:\n\n```\nparams = %{\"title\" => \"Movie Review\", \"author\" => \"NULL\"}\n\nchangeset = cast(%Post{}, params, [:title, :author], empty_values: [\"\", \"NULL\"]) \n\nchangeset.changes\n#=> %{title: \"Movie Review\"} \n```\n\nIn this example we added \"NULL\" to the empty values list and when we casted params the \"author\" key matched the \"NULL\" value so it was filtered out.\n"},{"slug":"2022-use-hardcoded-db-url-in-phoenix","category":"blog","title":"Using a hardcoded DB url in Phoenix","description":"how to use a db url in phoenix","tags":["elixir","phoenix"],"body":"\nWhen configuring a database connection, we usually supply values to the various keyword list elements in our config file like so:\n\n```\nconfig :store_db, Store.Repo, \ndatabase: \"store_db\", \nusername: \"postgres\", \npassword: \"postgres\", \nhostname: \"localhost\" \n```\nThese values are used to generate the url string we will use to authenticate and connect to the database. Alternatively if you want to explicitly set a hardcoded database url string you can do that as well. The example below uses the keywords to show which part of the url string maps to which keyword.\n\n\"postgres://username:password@hostname/db_name\"\n\nUsing our example above this would evaluate to:\n\n\"postgres://postgres:postgres@localhost/store_db\"\n\nAnd we can use that string in our config file like this:\n```\nconfig :music_db, MusicDB.Repo,\nurl: \"postgres://postgres:postgres@localhost/store_db\"\n```\n\nIf you enjoyed this post you may also enjoy [Postgres: create and execute database view](https://www.devdecks.io/2022-create-and-execute-db-view-postgres){:target=\"_blank}"},{"slug":"2022-validate-string-length-using-ecto","category":"blog","title":"Validate string length using Ecto","description":"How to validate string length using Ecto","tags":["elixir","ecto"],"body":"\nAs a quick refresher, the Ecto library comes with a Changeset module to aid in making changes to our database safely. Many of the functions that you have access to are validation functions to ensure your data is formatted properly. \n\nOne of the validation functions `Ecto.Changeset` ships with is `validate_length/3`. This function accepts three arguments:\n1. A changeset\n2. The field to validate the length of\n3. Options (like `min:` and `max:`)\n\nThese functions are typically piped to after casting your parameters and creating a changeset. A typical implementation looks like this:\n\n```\nparams = %{\"title\" => \"Walking by Henry David Thoreau\"} \n\nchangeset =\t\t\t\t\t\n%Post{}\n|> cast(params, [:title])\n|> validate_length(:title, min: 5) \n```\n\nIn the above implementation we validated that the \"title\" key's value had at least 5 characters. We can also validate that it doesn't have more than X characters, below we validate that the title is no more than 30 characters:\n\n```\nparams = %{\"title\" => \"Walking by Henry David Thoreau\"} \n\nchangeset =\t\t\t\t\t\n%Post{}\n|> cast(params, [:title])\n|> validate_length(:title, max: 30) \n```\n\nIf you enjoyed this post you may also enjoy [https://www.devdecks.io/2022-update-what-ecto-considers-empty](https://www.devdecks.io/2022-update-what-ecto-considers-empty){:target=\"_blank}."},{"slug":"2022-validating-string-is-a-url","category":"blog","title":"Validating a string is a URL in Rails","description":"Learn how to validate that a string is a URL in Rails","tags":["rails"],"body":"\nTried for a while to find a good example of this in Rails and ultimately came up with the following code:\n\n```ruby\n  validates :url,\n    allow_nil: true,\n    format: { :with => URI::regexp(%w(https)), :message => \"URL must be HTTPS\"}\n```\n\nThis ActiveRecord validation will use the Kernels URI::regexp to check for a regex match on the URL string for https, if the check fails an error will be returned on the object along with the message provided. If you need to validate for for both http and https you can pass an array to the regex:\n\n```ruby\nURI::regexp(%w([http, https])\n```\n\nFurther reading:\n- [Create a custom Mix task by example](https://www.devdecks.io/2021-create-a-custom-mix-task-by-example)\n- [Connecting Kubernetes Services to Deployments](https://www.devdecks.io/2021-connecting-services-to-deployments-kubernetes)\n\n\n"},{"slug":"2022-verify-http-header-signature-in-rails","category":"blog","title":"Verify HTTP header signature in Rails","description":"How to use rails to verify a header signature","tags":["rails","http"],"body":"\nWhat follows is an example of how to verify a header signature using `OpenSSL::Digest` and `OpenSSL::HMAC`.\n\nIf you would like more information on signing HTTP requests, here is a [link](https://tools.ietf.org/id/draft-cavage-http-signatures-07.html){:target=\"_blank\"} to the IETF documentation.\n\nIn this scenario a client will be sending an HTTP request header, signature, to our application. This header contains a SHA key we will have previously generated and sent to our client/integration partner. \n\nTo generate this key you will need three things:\n1. The hashing algorithm you want to use, in this case we use sha256.\n2. A key that will be used to sign the data. This should be something you can programatically access, probably a config value for the client that exists in the db. In this example we will use the hard coded string \"some_identifying_key_like_org_password\".\n3. The data being authenticated.\n\nGenerating the key:\n```ruby\ndigest = OpenSSL::Digest.new(\"sha256\")\nOpenSSL::HMAC.hexdigest(\n  digest,\n  \"some_identifying_key_like_org_password\",\n  \"the protected data\"\n)\n=> 5a7976b21f6fe4d0e0ac7d9a95511d0e53fe41a36e5d60bd43a2784428764248\n```\n\nAfter you've generated the key and sent it to your client you will need to handle the key verification in your controller. In the controller below we created a `before_action` to verify the signature. It will return an `:unauthorized` status unless the key you distributed to your client matches what you are expecting. \n\nThe `verify_signature` method handles the equality check, the `signed_request` method generates the key on the application side and the `header_signature` method gets the key from the request header.\n\n```ruby\ndef ApiController < ApplicationController\n  before_action :verify_signature\n  \n  def show\n    # would be called if verify_signature passes\n  end\n\n  def verify_signature\n    head :unauthorized unless signed_request == header_signature\n  end\n\n  def signed_request\n    digest = OpenSSL::Digest.new(\"sha256\")\n    OpenSSL::HMAC.hexdigest(\n      digest,\n      \"some_identifying_key_like_org_password\",\n      \"the protected data\"\n    )\n  end\n\n  def header_signature  \n    # the header would contain \"sha256 5a7976b21f6fe4d0e0ac7d9a95511d0e53fe41a36e5d60bd43a2784428764248\"\n    request.headers[:signature].gsub(\"sha256 \", \"\")\n  end\nend\n```\n\nFurther reading:\n- [When to use polymorphic associations in Rails](https://www.devdecks.io/2022-when-to-use-polymorphic-associations-rails){:target=\"_blank\"}\n- [Difference between before_save and before_update and before_create in Rails](https://www.devdecks.io/2022-before-save-vs-before-update-or-create-in-rails){:target=\"_blank\"}\n"},{"slug":"2022-vscode-new-window-mac","category":"blog","title":"Opening VScode in new window on Mac + shortcut","description":"new vscode window mac","tags":["vscode"],"body":"\nOnce you've installed VScode you will have access to the following command to open a new window:\n```\ncode -n .\n```\n\nIn order to create an alias for this command open your .bashrc or .zshrc or equivalent and create the alias:\n```\nalias code=\"code -n .\"\n```\n\nAfter restarting your terminal you could now be able to execute `code` to open a new window."},{"slug":"2023-create-db-record-ecto","category":"blog","title":"Create a new DB record using Ecto","description":"elixirs ecto library for db record inserts","tags":["elixir","ecto"],"body":"\nWhen using Ecto modules for your database adapter one of the first things you will want to learn how to do is insert records into your database. Typically if you're going to be inserting records from user input you will want to run those fields through an `Ecto.Changeset` but if you're just trying to test out insert functionality you can create an `Ecto.Schema` struct and then commit the insert using `Ecto.Repo` like so:\n```\niex(3)> o = Barks.Repo.get(Barks.Organization, \"733a7583-1a79-4c8d-b800-6a9a1513f80f\")\niex(4)> t = %Barks.Team{name: \"ddd\", organization: o}\niex(5)> Barks.Repo.insert(t)\n```\n\nSimilar posts:\n- [Retroactively add timestamps to an Ecto project](https://devdecks.io/2021-retroactively-add-timestamps-in-phoenix-ecto)\n"},{"slug":"2023-ecto-associations-with-uuids","category":"blog","title":"How to handle Ecto associations with UUIDs","description":"properly define ecto associations with uuids","tags":["elixir","ecto"],"body":"\nOverriding default database configurations can be tricky business and that's no exception when trying to go from using `id` for primary keys to using `UUID`. In a previous post I went over how to set [different primary keys](https://www.devdecks.io/2023-set-primary-key-ecto) in Ecto, which setup our app to use UUID's at the database level. \n\nNow we'll be working to make this function at the app level, and it only requires a few changes to our schema files. This example will use a standard `has_many` and `belongs_to` association, piggy backing off of the previously mentioned [post](https://www.devdecks.io/2023-set-primary-key-ecto).\n\nIn both the `has_many` and `belongs_to` side of the association the setup is going to look the same. It takes the format of `association_function: :ecto_schema, EctoSchemaModule, references :field_name`.\n\nFor the has many side that looks like this:\n```\ndefmodule Barks.Organization do\n  use Ecto.Schema\n  alias Barks.Team\n\n  @primary_key {:uuid, :binary_id, autogenerate: true}\n  @foreign_key_type :binary_id\n  schema \"organizations\" do\n    field :name, :string\n    has_many :teams, Team, references: :uuid\n  end\nend\n```\n\nAnd for the belongs_to side of the assocation that looks like:\n```\ndefmodule Barks.Team do\n  use Ecto.Schema\n  alias Barks.Organization\n\n  @primary_key {:uuid, :binary_id, autogenerate: true}\n  @foreign_key_type :binary_id\n  schema \"teams\" do\n    field :name, :string\n    belongs_to :organization, Organization, references: :uuid\n  end\nend\n```\n\nSimilar posts:\n- [invalid_foreign_key - no unique constraint](https://devdecks.io/2023-invalid_foreign_key-no-unique-constraint)\n"},{"slug":"2023-invalid-association-does-not-have-field-id","category":"blog","title":"Invalid association: associated schema does not have field :id","description":"fix invalid association ecto","tags":["elixir","ecto"],"body":"\nWhen I came across this error it read in full:\n```\ninvalid association `organization` in schema Barks.Team: associated schema Barks.Organization does not have field `id` \n```\n\nThis was because I hadn't updated what the new reference should be in my `belongs_to` association after I switched from [id to uuid](https://www.devdecks.io/2023-set-primary-key-ecto) for database primary keys.\n\nMy `belongs_to` declaration looked like the below when it was erroing:\n```\nbelongs_to :organization, Organization\n```\n\nBut what I need was to explicitly call out the reference:\n```\nbelongs_to :organization, Organization, references: :uuid\n```\n\nSimilar posts:\n- [How to handle Ecto associations with UUIDs](https://devdecks.io/2023-ecto-associations-with-uuids)\n"},{"slug":"2023-invalid_foreign_key-no-unique-constraint","category":"blog","title":"invalid_foreign_key - no unique constraint matching given keys for referenced table","description":"learn to override default primary keys ecto","tags":["ecto","elixir"],"body":"\nI encountered this error when trying to set associations for two related schemas. The error turned out to be an issue with how I set the created the original tables.\n\nMy initial table configuration looked like the below. I had used the `primary_key` keyword option when defining the field that was going to take the place of the default primary key, but I had missed the fact that I also needed to use that same keyword option when defining the table (though with a different value).\n\nThis is what I had written before:\n```\ndef change do\n  create table(\"organizations\") do\n    add :name, :string\n    add :logo, :string\n    add :subdomain, :string\n    add :uuid, :binary_id, primary_key: :true\n  end\nend\n```\n\nAfter rollback this migration with `mix ecto.rollback`, this is what fixed the error. Notice the `table` function now includes `primary_key: :false`.\n```\n  create table(\"organizations\", primary_key: :false) do\n    add :name, :string\n    add :logo, :string\n    add :subdomain, :string\n    add :uuid, :binary_id, primary_key: :true\n  end\n```\n\nSimilar posts:\n- [How to set a primary key using Ecto](https://devdecks.io/2023-set-primary-key-ecto)\n"},{"slug":"2023-set-primary-key-ecto","category":"blog","title":"How to set a primary key using Ecto","description":"learn to override default primary keys ecto","tags":["elixir","ecto"],"body":"\nI had some trouble getting this right and the information across the internet had varrying strategies that often didn't include all of the details needed to get this right so hopefully this is the answer you're looking for. In this example I use the primary key `:uuid`.\n\nTo start generate your migration file with `mix ecto.gen.migration organizations`. From there you will need to include two `primary_key` keyword list options. The first in the `table` function and the second in the `field` function. Example setup:\n\n```\ndef change do\n  create table(\"organizations\", primary_key: :false) do\n    add :name, :string\n    add :uuid, :binary_id, primary_key: :true\n  end\nend\n```\n\nAnd then in your schema file at `lib/organization.ex` you will set the schema struct and use the module attributes `@primary_key` and `@foreign_key_type` to set the new primary key and foreign key (if needed) data.\n```\n@primary_key {:uuid, :binary_id, autogenerate: true}\n@foreign_key_type :binary_id\nschema \"organizations\" do\n  field :name, :string\nend\n```\n\nSimilar posts:\n- [Create a new DB record using Ecto](https://devdecks.io/2023-create-db-record-ecto)\n"},{"slug":"2023-visualizing-db-schema-ecto","category":"blog","title":"Visualize Database Schema Using Ecto","description":"print schema in ecto","tags":["elixir","ecto"],"body":"\nIt was hard for me find a way to create a db schema to visualize my apps tables and columns in Ecto. I was looking for something similar to rails `schema.rb`, but everything that came up discussed `Ecto.Schema`. If somehow you ended up here looking for an answer to the problem just mentioned you can use the mix task `ecto.dump` to accomplish this.\n\n```\nmix ecto.dump\n```\n\nThis will generate a `structure.sql` file containing the structure of your database in `priv/repo`\n\nSimilar posts:\n- [How to handle Ecto associations with UUIDs](https://devdecks.io/2023-ecto-associations-with-uuids)\n"}]